name: Deploy Model Management Service

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'backend/services/model-management/**'
      - 'infrastructure/kubernetes/model-management/**'
      - '.github/workflows/deploy-model-management.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'backend/services/model-management/**'
      - 'infrastructure/kubernetes/model-management/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/model-management
  KUBERNETES_VERSION: '1.29'
  HELM_VERSION: '3.13.0'
  KUBECTL_VERSION: '1.29.0'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/services/model-management/package-lock.json

      - name: Install dependencies
        working-directory: backend/services/model-management
        run: npm ci

      - name: Run linting
        working-directory: backend/services/model-management
        run: npm run lint

      - name: Run type checking
        working-directory: backend/services/model-management
        run: npm run type-check

      - name: Run unit tests
        working-directory: backend/services/model-management
        run: npm run test:unit

      - name: Run integration tests
        working-directory: backend/services/model-management
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/test

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/services/model-management/coverage/lcov.info
          flags: model-management
          name: model-management-coverage

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'backend/services/model-management'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        working-directory: backend/services/model-management
        run: npm audit --audit-level=moderate

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'model-management'
          path: 'backend/services/model-management'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
            network=host

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: backend/services/model-management
          file: backend/services/model-management/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            NODE_VERSION=20
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

      - name: Sign container image
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.0'

      - name: Sign the container image
        run: |
          echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.build.outputs.digest }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Attach SBOM to image
        run: |
          cosign attach sbom --sbom sbom.spdx.json ${{ steps.meta.outputs.tags }}@${{ steps.build.outputs.digest }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    timeout-minutes: 15
    environment:
      name: staging
      url: https://staging-models.fineprint.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: '5.0.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_STAGING }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name fineprint-staging --region us-west-2

      - name: Update image tag in kustomization
        working-directory: infrastructure/kubernetes/model-management
        run: |
          kustomize edit set image fineprint/model-management=${{ needs.build.outputs.image-tag }}

      - name: Validate Kubernetes manifests
        working-directory: infrastructure/kubernetes/model-management
        run: |
          kustomize build . | kubectl apply --dry-run=client -f -

      - name: Deploy to Kubernetes
        working-directory: infrastructure/kubernetes/model-management
        run: |
          kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/fineprint-model-management-v1 -n model-management --timeout=10m

      - name: Run smoke tests
        run: |
          kubectl run smoke-test --image=curlimages/curl:latest --rm -i --restart=Never -- \
            curl -f http://model-management-service.model-management.svc.cluster.local/health

      - name: Verify deployment
        run: |
          kubectl get pods -n model-management -l app=model-management
          kubectl get hpa -n model-management
          kubectl describe deployment fineprint-model-management-v1 -n model-management

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    timeout-minutes: 20
    environment:
      name: production
      url: https://models.fineprint.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_PRODUCTION }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name fineprint-production --region us-west-2

      - name: Create backup of current deployment
        run: |
          kubectl get all -n model-management -o yaml > backup-$(date +%Y%m%d-%H%M%S).yaml

      - name: Blue-Green Deployment
        run: |
          # Create new deployment (green)
          kubectl apply -f infrastructure/kubernetes/model-management/ \
            --selector='app=model-management,version=green'
          
          # Wait for green deployment to be ready
          kubectl rollout status deployment/model-management-green -n model-management --timeout=10m
          
          # Run health checks on green deployment
          kubectl run health-check --image=curlimages/curl:latest --rm -i --restart=Never -- \
            curl -f http://model-management-green-service.model-management.svc.cluster.local/health
          
          # Switch traffic to green deployment
          kubectl patch service model-management-service -n model-management \
            -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Wait and monitor
          sleep 60
          
          # If successful, cleanup blue deployment
          kubectl delete deployment model-management-blue -n model-management --ignore-not-found=true

      - name: Update autoscaling policies
        run: |
          kubectl apply -f infrastructure/kubernetes/model-management/hpa.yaml

      - name: Run production tests
        run: |
          # Test model management API
          curl -f https://models.fineprint.ai/health
          
          # Test Ollama endpoints
          for model in llama qwen gpt-oss business; do
            kubectl exec -n model-management deployment/ollama-$model -- \
              curl -f http://localhost:11434/api/tags
          done

      - name: Monitor deployment metrics
        run: |
          # Check resource usage
          kubectl top pods -n model-management
          kubectl top nodes
          
          # Check HPA status
          kubectl get hpa -n model-management
          
          # Check PVC usage
          kubectl exec -n model-management deployment/model-management -- df -h

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Model Management Service deployment to production: ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure()
    timeout-minutes: 10
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_PRODUCTION }}
          aws-region: us-west-2

      - name: Rollback deployment
        run: |
          aws eks update-kubeconfig --name fineprint-production --region us-west-2
          kubectl rollout undo deployment/model-management -n model-management
          kubectl rollout status deployment/model-management -n model-management --timeout=5m

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          text: 'Model Management Service deployment rolled back due to failure'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}