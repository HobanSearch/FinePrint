import sharp from 'sharp';
import { createCanvas, registerFont } from 'canvas';
import { PrismaClient } from '@prisma/client';
import { config } from '../config';
import { logger } from '../utils/logger';
import { PrivacyScore } from '../types';

const prisma = new PrismaClient();

export class ScoreCardGenerator {
  private readonly width = config.imageGeneration.width;
  private readonly height = config.imageGeneration.height;
  private readonly format = config.imageGeneration.format;

  /**
   * Generate a shareable score card image
   */
  async generateScoreCard(
    website: any,
    score: PrivacyScore
  ): Promise<{ imageUrl: string; shareableUrl: string }> {
    try {
      // Create canvas
      const canvas = createCanvas(this.width, this.height);
      const ctx = canvas.getContext('2d');

      // Background gradient
      const gradient = ctx.createLinearGradient(0, 0, this.width, this.height);
      gradient.addColorStop(0, '#1a1a2e');
      gradient.addColorStop(1, '#16213e');
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, this.width, this.height);

      // Add grid pattern
      this.drawGrid(ctx);

      // Draw header
      ctx.fillStyle = '#ffffff';
      ctx.font = 'bold 48px Arial';
      ctx.textAlign = 'center';
      ctx.fillText('Privacy Score Report', this.width / 2, 80);

      // Draw website name
      ctx.font = '36px Arial';
      ctx.fillStyle = '#e94560';
      ctx.fillText(website.name, this.width / 2, 140);

      // Draw score circle
      const centerX = this.width / 2;
      const centerY = this.height / 2 + 20;
      const radius = 120;
      
      // Outer circle
      ctx.beginPath();
      ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
      ctx.strokeStyle = this.getGradeColor(score.grade);
      ctx.lineWidth = 20;
      ctx.stroke();

      // Inner circle background
      ctx.beginPath();
      ctx.arc(centerX, centerY, radius - 30, 0, 2 * Math.PI);
      ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
      ctx.fill();

      // Score text
      ctx.fillStyle = '#ffffff';
      ctx.font = 'bold 72px Arial';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillText(score.overallScore.toFixed(0), centerX, centerY - 20);

      // Grade text
      ctx.font = 'bold 48px Arial';
      ctx.fillStyle = this.getGradeColor(score.grade);
      ctx.fillText(score.grade, centerX, centerY + 40);

      // Draw breakdown bars
      const barStartY = centerY + radius + 60;
      const barWidth = 200;
      const barHeight = 20;
      const barSpacing = 40;
      
      const breakdownItems = [
        { label: 'Pattern Detection', value: score.breakdown.patternDetection },
        { label: 'Data Collection', value: score.breakdown.dataCollection },
        { label: 'User Rights', value: score.breakdown.userRights },
        { label: 'Transparency', value: score.breakdown.transparency },
      ];

      breakdownItems.forEach((item, index) => {
        const y = barStartY + (index * barSpacing);
        const x = (this.width - barWidth) / 2;

        // Label
        ctx.fillStyle = '#ffffff';
        ctx.font = '16px Arial';
        ctx.textAlign = 'left';
        ctx.fillText(item.label, x - 150, y + 5);

        // Background bar
        ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
        ctx.fillRect(x, y - 10, barWidth, barHeight);

        // Value bar
        ctx.fillStyle = this.getScoreColor(item.value);
        ctx.fillRect(x, y - 10, (barWidth * item.value) / 100, barHeight);

        // Value text
        ctx.fillStyle = '#ffffff';
        ctx.textAlign = 'right';
        ctx.fillText(`${item.value.toFixed(0)}%`, x + barWidth + 20, y + 5);
      });

      // Footer
      ctx.fillStyle = '#666666';
      ctx.font = '14px Arial';
      ctx.textAlign = 'center';
      ctx.fillText('Generated by FinePrint AI - fineprintai.com', this.width / 2, this.height - 30);
      ctx.fillText(new Date().toLocaleDateString(), this.width / 2, this.height - 10);

      // Convert canvas to buffer
      const buffer = canvas.toBuffer('image/png');

      // Generate unique filename
      const filename = `${website.id}-${Date.now()}.${this.format}`;
      const imageUrl = `/score-cards/${filename}`;
      const shareableUrl = this.generateShareableUrl();

      // Save to database
      await prisma.scoreCard.create({
        data: {
          websiteId: website.id,
          score: score.overallScore,
          grade: score.grade,
          imageUrl,
          shareableUrl,
          metadata: {
            breakdown: score.breakdown,
            trending: score.trending,
            generatedAt: new Date().toISOString(),
          },
          expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days
        },
      });

      // In production, upload to S3 or similar
      // For now, return local URL
      logger.info(`Score card generated for ${website.name}`);
      
      return { imageUrl, shareableUrl };

    } catch (error) {
      logger.error('Failed to generate score card:', error);
      throw error;
    }
  }

  /**
   * Draw grid pattern on canvas
   */
  private drawGrid(ctx: CanvasRenderingContext2D): void {
    ctx.strokeStyle = 'rgba(255, 255, 255, 0.05)';
    ctx.lineWidth = 1;

    // Vertical lines
    for (let x = 0; x < this.width; x += 50) {
      ctx.beginPath();
      ctx.moveTo(x, 0);
      ctx.lineTo(x, this.height);
      ctx.stroke();
    }

    // Horizontal lines
    for (let y = 0; y < this.height; y += 50) {
      ctx.beginPath();
      ctx.moveTo(0, y);
      ctx.lineTo(this.width, y);
      ctx.stroke();
    }
  }

  /**
   * Get color based on grade
   */
  private getGradeColor(grade: string): string {
    switch (grade) {
      case 'A': return '#10b981'; // Green
      case 'B': return '#3b82f6'; // Blue
      case 'C': return '#f59e0b'; // Yellow
      case 'D': return '#f97316'; // Orange
      case 'F': return '#ef4444'; // Red
      default: return '#6b7280'; // Gray
    }
  }

  /**
   * Get color based on score value
   */
  private getScoreColor(score: number): string {
    if (score >= 80) return '#10b981';
    if (score >= 60) return '#3b82f6';
    if (score >= 40) return '#f59e0b';
    if (score >= 20) return '#f97316';
    return '#ef4444';
  }

  /**
   * Generate unique shareable URL
   */
  private generateShareableUrl(): string {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < 8; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  }

  /**
   * Get score card by shareable URL
   */
  async getScoreCard(shareableUrl: string): Promise<any> {
    const scoreCard = await prisma.scoreCard.findUnique({
      where: { shareableUrl },
      include: {
        website: true,
      },
    });

    if (!scoreCard) {
      return null;
    }

    // Check if expired
    if (scoreCard.expiresAt < new Date()) {
      await prisma.scoreCard.delete({
        where: { id: scoreCard.id },
      });
      return null;
    }

    return scoreCard;
  }
}

export const scoreCardGenerator = new ScoreCardGenerator();