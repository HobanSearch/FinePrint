version: '3.8'

services:
  sre-monitoring:
    build: .
    container_name: fineprint-sre-monitoring
    restart: unless-stopped
    ports:
      - "9000:9000"  # API port
      - "9090:9090"  # Prometheus metrics port
    environment:
      NODE_ENV: production
      SRE_PORT: 9000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/fineprint_sre
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PROMETHEUS_PORT: 9090
      GRAFANA_URL: http://grafana:3000
      GRAFANA_API_KEY: ${GRAFANA_API_KEY}
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      LOKI_HOST: loki
      LOKI_PORT: 3100
      PAGERDUTY_API_KEY: ${PAGERDUTY_API_KEY}
      PAGERDUTY_INTEGRATION_KEY: ${PAGERDUTY_INTEGRATION_KEY}
    networks:
      - fineprint-network
    depends_on:
      - postgres
      - redis
      - prometheus
      - grafana
      - jaeger
      - loki

  prometheus:
    image: prom/prometheus:latest
    container_name: fineprint-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - fineprint-network

  grafana:
    image: grafana/grafana:latest
    container_name: fineprint-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - fineprint-network
    depends_on:
      - prometheus

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: fineprint-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
      SPAN_STORAGE_TYPE: badger
      BADGER_EPHEMERAL: "false"
      BADGER_DIRECTORY_VALUE: /badger/data
      BADGER_DIRECTORY_KEY: /badger/key
    volumes:
      - jaeger-data:/badger
    networks:
      - fineprint-network

  loki:
    image: grafana/loki:latest
    container_name: fineprint-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki
    networks:
      - fineprint-network

  postgres:
    image: postgres:16-alpine
    container_name: fineprint-postgres-sre
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: fineprint_sre
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - fineprint-network

  redis:
    image: redis:7-alpine
    container_name: fineprint-redis-sre
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - fineprint-network

  alertmanager:
    image: prom/alertmanager:latest
    container_name: fineprint-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - fineprint-network

volumes:
  prometheus-data:
  grafana-data:
  jaeger-data:
  loki-data:
  postgres-data:
  redis-data:
  alertmanager-data:

networks:
  fineprint-network:
    external: true