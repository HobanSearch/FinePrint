apiVersion: apps/v1
kind: Deployment
metadata:
  name: sre-monitoring
  namespace: fineprint
  labels:
    app: sre-monitoring
    component: monitoring
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: sre-monitoring
  template:
    metadata:
      labels:
        app: sre-monitoring
        component: monitoring
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: sre-monitoring
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: sre-monitoring
        image: fineprint/sre-monitoring:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 9000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: SRE_PORT
          value: "9000"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: sre-monitoring-secrets
              key: database-url
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: password
        - name: PROMETHEUS_PORT
          value: "9090"
        - name: GRAFANA_URL
          value: "http://grafana-service:3000"
        - name: GRAFANA_API_KEY
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: api-key
        - name: JAEGER_ENDPOINT
          value: "http://jaeger-collector:14268/api/traces"
        - name: LOKI_HOST
          value: "loki-service"
        - name: LOKI_PORT
          value: "3100"
        - name: PAGERDUTY_API_KEY
          valueFrom:
            secretKeyRef:
              name: pagerduty-secrets
              key: api-key
        - name: PAGERDUTY_INTEGRATION_KEY
          valueFrom:
            secretKeyRef:
              name: pagerduty-secrets
              key: integration-key
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: http
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 30
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - sre-monitoring
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: sre-monitoring-service
  namespace: fineprint
  labels:
    app: sre-monitoring
    component: monitoring
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 9000
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app: sre-monitoring
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sre-monitoring
  namespace: fineprint
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sre-monitoring
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources:
  - deployments
  - replicasets
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: ["autoscaling"]
  resources:
  - horizontalpodautoscalers
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: [""]
  resources:
  - pods
  verbs: ["delete"]  # For chaos engineering
- apiGroups: [""]
  resources:
  - events
  verbs: ["create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sre-monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: sre-monitoring
subjects:
- kind: ServiceAccount
  name: sre-monitoring
  namespace: fineprint
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sre-monitoring-hpa
  namespace: fineprint
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sre-monitoring
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: sre-monitoring-pdb
  namespace: fineprint
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: sre-monitoring