import { EventEmitter } from 'events';
import { WorkflowDefinition, WorkflowExecution, WorkflowSchedule, WorkflowTemplate, WorkflowMetrics } from '@/types/workflow';
import { AgentRegistry, CommunicationBus, DecisionEngine, ResourceManager } from './';
export declare class WorkflowEngine extends EventEmitter {
    private agentRegistry;
    private communicationBus;
    private decisionEngine;
    private resourceManager;
    private workflows;
    private executions;
    private schedules;
    private templates;
    private cronJobs;
    private executionQueue;
    private running;
    constructor(agentRegistry: AgentRegistry, communicationBus: CommunicationBus, decisionEngine: DecisionEngine, resourceManager: ResourceManager);
    initialize(): Promise<void>;
    startScheduler(): Promise<void>;
    stop(): Promise<void>;
    createWorkflow(definition: WorkflowDefinition): Promise<string>;
    updateWorkflow(workflowId: string, definition: WorkflowDefinition): Promise<void>;
    deleteWorkflow(workflowId: string): Promise<void>;
    executeWorkflow(workflowId: string, input?: Record<string, any>, triggeredBy?: string, priority?: number): Promise<string>;
    cancelExecution(executionId: string, reason?: string): Promise<void>;
    private executeTask;
    private cancelTask;
    createTemplate(template: WorkflowTemplate): Promise<string>;
    instantiateTemplate(templateId: string, customizations?: Record<string, any>): Promise<string>;
    scheduleWorkflow(scheduleId: string, schedule: WorkflowSchedule): Promise<void>;
    getWorkflowMetrics(workflowId: string): Promise<WorkflowMetrics>;
    private setupEventListeners;
    private validateWorkflowDefinition;
    private checkCircularDependencies;
    private selectAgentForTask;
    private resolveTaskInput;
    private areTaskDependenciesMet;
    private evaluateTaskConditions;
    private addTaskLog;
    private startExecutionProcessor;
    private processExecution;
    private applyTemplateCustomizations;
    private getNextRunDate;
    private calculatePerformanceTrends;
    private loadWorkflows;
    private loadSchedules;
    private loadTemplates;
    private handleAgentStatusChange;
    private handleResourceAllocation;
    getWorkflow(workflowId: string): WorkflowDefinition | undefined;
    getExecution(executionId: string): WorkflowExecution | undefined;
    getTemplate(templateId: string): WorkflowTemplate | undefined;
    getAllWorkflows(): WorkflowDefinition[];
    getAllExecutions(): WorkflowExecution[];
    getAllTemplates(): WorkflowTemplate[];
}
//# sourceMappingURL=workflow-engine.d.ts.map