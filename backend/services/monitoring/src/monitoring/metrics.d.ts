declare const register: any;
export declare const metrics: {
    httpRequestsTotal: any;
    httpRequestDuration: any;
    documentsMonitored: any;
    documentChangesDetected: any;
    documentCrawlsTotal: any;
    documentCrawlDuration: any;
    changeAnalysisTotal: any;
    changeAnalysisDuration: any;
    riskScoreChanges: any;
    webhookDeliveries: any;
    webhookDeliveryDuration: any;
    webhookRetries: any;
    alertsTriggered: any;
    activeAlerts: any;
    notificationsSent: any;
    circuitBreakerState: any;
    circuitBreakerRequests: any;
    rateLimitedRequests: any;
    rateLimiterQueueSize: any;
    databaseConnections: any;
    databaseQueries: any;
    databaseQueryDuration: any;
    changeStreamEvents: any;
    activeChangeStreams: any;
    queueJobs: any;
    activeQueueJobs: any;
    queueJobDuration: any;
    memoryUsage: any;
    cpuUsage: any;
    errorsTotal: any;
    userSessions: any;
    documentsAnalyzed: any;
};
export declare class MetricsCollector {
    private memoryUpdateInterval;
    constructor();
    recordHttpRequest(method: string, route: string, statusCode: number, duration: number, userId?: string): void;
    updateDocumentsMonitored(count: number, userId: string, teamId?: string, documentType?: string): void;
    recordDocumentChange(changeType: string, userId: string, teamId?: string, documentType?: string): void;
    recordDocumentCrawl(status: 'success' | 'failure', duration: number, userId: string, documentType?: string): void;
    recordChangeAnalysis(changeType: string, duration: number, documentType?: string): void;
    recordRiskScoreChange(riskChange: number, userId: string, documentType?: string): void;
    recordWebhookDelivery(status: 'success' | 'failure', duration: number, webhookId: string, eventType: string): void;
    recordWebhookRetry(webhookId: string, attempt: number): void;
    recordAlertTriggered(severity: string, ruleId: string, userId: string): void;
    updateActiveAlerts(count: number, severity: string, userId: string): void;
    recordNotificationSent(channelType: string, status: 'success' | 'failure', severity: string): void;
    updateCircuitBreakerState(breakerName: string, state: 'closed' | 'half-open' | 'open', group?: string): void;
    recordCircuitBreakerRequest(breakerName: string, status: 'success' | 'failure' | 'rejected'): void;
    recordRateLimitedRequest(limiterId: string, status: 'allowed' | 'rejected'): void;
    updateRateLimiterQueueSize(limiterId: string, size: number): void;
    updateDatabaseConnections(count: number, databaseName: string): void;
    recordDatabaseQuery(operation: string, collection: string, status: 'success' | 'failure', duration: number): void;
    recordChangeStreamEvent(streamId: string, operationType: string, collection: string): void;
    updateActiveChangeStreams(count: number, database: string): void;
    recordQueueJob(queueName: string, status: 'completed' | 'failed', jobType: string, duration: number): void;
    updateActiveQueueJobs(queueName: string, count: number): void;
    recordError(service: string, errorType: string, severity: 'low' | 'medium' | 'high' | 'critical'): void;
    updateUserSessions(count: number): void;
    recordDocumentAnalyzed(userId: string, documentType: string, tier: string): void;
    private startSystemMetricsCollection;
    private stopSystemMetricsCollection;
    shutdown(): void;
}
export declare const metricsCollector: MetricsCollector;
export declare function initializeMetrics(): void;
export { register as prometheusRegister };
//# sourceMappingURL=metrics.d.ts.map