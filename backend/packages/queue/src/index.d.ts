import { Queue, Worker, Job } from 'bullmq';
import type { JobOptions, QueueConfig, QueueStats, JobStatus, AnalysisJobData, MonitoringJobData, NotificationJobData, EmailJobData, WebhookJobData, ActionJobData, CleanupJobData, ExportJobData, BulkJobOperation, ScheduledJobConfig } from '@fineprintai/shared-types';
export { EnhancedQueueManager } from './enhanced-queue-manager';
export * from './priority-manager';
export * from './dead-letter-handler';
export * from './metrics-collector';
export * from './worker-scaler';
export * from './job-scheduler';
export { priorityManager } from './priority-manager';
export { default as DeadLetterHandler } from './dead-letter-handler';
export { default as MetricsCollector } from './metrics-collector';
export { default as WorkerScaler } from './worker-scaler';
export { default as JobScheduler } from './job-scheduler';
export declare class QueueManager {
    private connection;
    private queues;
    private workers;
    private queueEvents;
    constructor();
    createQueue(name: string, options?: Partial<QueueConfig>): Queue;
    createWorker<T = any>(queueName: string, processor: (job: Job<T>) => Promise<any>, options?: {
        concurrency?: number;
        limiter?: {
            max: number;
            duration: number;
        };
    }): Worker<T>;
    addJob<T = any>(queueName: string, jobName: string, data: T, options?: JobOptions): Promise<Job<T>>;
    getJob(queueName: string, jobId: string): Promise<Job | null>;
    getQueueStats(queueName: string): Promise<QueueStats>;
    getJobStatus(queueName: string, jobId: string): Promise<JobStatus | null>;
    removeJob(queueName: string, jobId: string): Promise<boolean>;
    retryJob(queueName: string, jobId: string): Promise<boolean>;
    pauseQueue(queueName: string): Promise<void>;
    resumeQueue(queueName: string): Promise<void>;
    cleanQueue(queueName: string, grace?: number, limit?: number, type?: 'completed' | 'waiting' | 'active' | 'delayed' | 'failed'): Promise<string[]>;
    obliterateQueue(queueName: string): Promise<void>;
    closeAll(): Promise<void>;
    getQueue(name: string): Queue | undefined;
    getWorker(name: string): Worker | undefined;
    getAllQueueNames(): string[];
}
export declare const queueManager: QueueManager;
import { EnhancedQueueManager } from './enhanced-queue-manager';
export declare const enhancedQueueManager: EnhancedQueueManager;
export declare const analysisQueue: Queue;
export declare const monitoringQueue: Queue;
export declare const notificationQueue: Queue;
export declare const actionQueue: Queue;
export declare const cleanupQueue: Queue;
export declare const exportQueue: Queue;
export declare const addAnalysisJob: (data: AnalysisJobData, options?: JobOptions) => Promise<Job<T>>;
export declare const addMonitoringJob: (data: MonitoringJobData, options?: JobOptions) => Promise<Job<T>>;
export declare const addNotificationJob: (data: NotificationJobData, options?: JobOptions) => Promise<Job<T>>;
export declare const addEmailJob: (data: EmailJobData, options?: JobOptions) => Promise<Job<T>>;
export declare const addWebhookJob: (data: WebhookJobData, options?: JobOptions) => Promise<Job<T>>;
export declare const addActionJob: (data: ActionJobData, options?: JobOptions) => Promise<Job<T>>;
export declare const addCleanupJob: (data: CleanupJobData, options?: JobOptions) => Promise<Job<T>>;
export declare const addExportJob: (data: ExportJobData, options?: JobOptions) => Promise<Job<T>>;
export declare const bulkAddJobs: (queueName: string, operation: BulkJobOperation) => Promise<Job[]>;
export declare const getQueueMetrics: (queueName: string) => Promise<QueueMetrics>;
export declare const performHealthCheck: (queueName: string) => Promise<QueueHealthCheck>;
export declare const getAllHealthChecks: () => QueueHealthCheck[];
export declare const getAllMetrics: () => QueueMetrics[];
export declare const cancelJob: (queueName: string, jobId: string, reason?: string) => Promise<boolean>;
export declare const getJobStatus: (queueName: string, jobId: string) => Promise<any>;
export declare const scheduleJob: (config: ScheduledJobConfig) => Promise<void>;
export declare const getScheduledJobs: () => ScheduledJobConfig[];
export default enhancedQueueManager;
//# sourceMappingURL=index.d.ts.map