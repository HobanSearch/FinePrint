version: '3.8'

services:
  # Fine Print AI Queue System
  queue-system:
    build: .
    container_name: fineprint-queue
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - REDIS_QUEUE_DB=1
      - PROMETHEUS_METRICS_ENABLED=true
      - QUEUE_CHECK_INTERVAL=30000
      - QUEUE_METRICS_RETENTION_DAYS=7
      - LOG_LEVEL=info
    ports:
      - "3000:3000"    # API port
      - "9090:9090"    # Metrics port  
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - queue_logs:/app/logs
      - queue_data:/app/data
    restart: unless-stopped
    networks:
      - queue_network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis for queue storage
  redis:
    image: redis:7-alpine
    container_name: fineprint-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf:ro
    restart: unless-stopped
    networks:
      - queue_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Redis Commander (Redis GUI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: fineprint-redis-ui
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=fineprintai2024
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - queue_network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: fineprint-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=168h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9091:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    depends_on:
      - queue-system
    restart: unless-stopped
    networks:
      - queue_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: fineprint-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=fineprintai2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - queue_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Bull Board (BullMQ Dashboard)
  bull-board:
    image: node:18-alpine
    container_name: fineprint-bull-board
    working_dir: /app
    command: sh -c "npm install @bull-board/api @bull-board/express bull && node bull-board.js"
    environment:
      - REDIS_URL=redis://redis:6379
      - PORT=3002
    ports:
      - "3002:3002"
    volumes:
      - ./docker/bull-board.js:/app/bull-board.js:ro
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - queue_network

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: fineprint-loki
    ports:
      - "3100:3100"
    volumes:
      - ./docker/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - queue_network

  # Log collection with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: fineprint-promtail
    volumes:
      - ./docker/promtail-config.yml:/etc/promtail/config.yml:ro
      - queue_logs:/var/log/app:ro
      - /var/log:/var/log/host:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - queue_network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: fineprint-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - queue-system
      - grafana
      - bull-board
    restart: unless-stopped
    networks:
      - queue_network

# Named volumes for persistent data
volumes:
  redis_data:
    driver: local
  queue_logs:
    driver: local
  queue_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

# Custom network for service communication
networks:
  queue_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16