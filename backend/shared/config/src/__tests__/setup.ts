// Test setup and configuration\n// Sets up test environment, mocks, and global utilities\n\nimport { PrismaClient } from '@prisma/client';\nimport Redis from 'ioredis';\nimport { initializeLogger } from '../utils/logger';\n\n// Initialize test logger\ninitializeLogger({\n  serviceName: 'config-service-test',\n  environment: 'development',\n  logLevel: 'error', // Reduce noise in tests\n  enablePrettyPrint: false,\n});\n\n// Mock Prisma client\njest.mock('@prisma/client', () => ({\n  PrismaClient: jest.fn().mockImplementation(() => ({\n    $connect: jest.fn(),\n    $disconnect: jest.fn(),\n    $queryRaw: jest.fn(),\n    configuration: {\n      create: jest.fn(),\n      findMany: jest.fn(),\n      findFirst: jest.fn(),\n      findUnique: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n      upsert: jest.fn(),\n    },\n    featureFlag: {\n      create: jest.fn(),\n      findMany: jest.fn(),\n      findFirst: jest.fn(),\n      findUnique: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n    configurationSecret: {\n      create: jest.fn(),\n      findMany: jest.fn(),\n      findUnique: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n      deleteMany: jest.fn(),\n    },\n    configurationAuditLog: {\n      create: jest.fn(),\n      findMany: jest.fn(),\n    },\n    featureFlagAuditLog: {\n      create: jest.fn(),\n      findMany: jest.fn(),\n    },\n    featureFlagEvaluation: {\n      create: jest.fn(),\n      findMany: jest.fn(),\n    },\n    serviceRegistry: {\n      create: jest.fn(),\n      findMany: jest.fn(),\n      findUnique: jest.fn(),\n      update: jest.fn(),\n      upsert: jest.fn(),\n    },\n    configurationSubscription: {\n      create: jest.fn(),\n      findMany: jest.fn(),\n      update: jest.fn(),\n      updateMany: jest.fn(),\n      upsert: jest.fn(),\n    },\n  })),\n}));\n\n// Mock Redis client\njest.mock('ioredis', () => {\n  const mockRedis = {\n    connect: jest.fn(),\n    disconnect: jest.fn(),\n    get: jest.fn(),\n    set: jest.fn(),\n    setex: jest.fn(),\n    del: jest.fn(),\n    mget: jest.fn(),\n    keys: jest.fn(),\n    exists: jest.fn(),\n    ttl: jest.fn(),\n    expire: jest.fn(),\n    ping: jest.fn(),\n    publish: jest.fn(),\n    subscribe: jest.fn(),\n    psubscribe: jest.fn(),\n    duplicate: jest.fn(() => mockRedis),\n    pipeline: jest.fn(() => ({\n      setex: jest.fn(),\n      del: jest.fn(),\n      sadd: jest.fn(),\n      srem: jest.fn(),\n      smembers: jest.fn(),\n      exec: jest.fn(),\n    })),\n    memory: jest.fn(),\n    info: jest.fn(),\n    on: jest.fn(),\n  };\n  \n  return jest.fn(() => mockRedis);\n});\n\n// Mock WebSocket\njest.mock('ws', () => ({\n  WebSocketServer: jest.fn().mockImplementation(() => ({\n    on: jest.fn(),\n    close: jest.fn(),\n    options: { port: 8080 },\n  })),\n  WebSocket: {\n    OPEN: 1,\n  },\n}));\n\n// Global test utilities\nglobal.testUtils = {\n  // Create mock Prisma client\n  createMockPrismaClient: (): jest.Mocked<PrismaClient> => {\n    return new PrismaClient() as jest.Mocked<PrismaClient>;\n  },\n  \n  // Create mock Redis client\n  createMockRedisClient: (): jest.Mocked<Redis> => {\n    return new Redis() as jest.Mocked<Redis>;\n  },\n  \n  // Wait for async operations\n  wait: (ms: number): Promise<void> => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  },\n  \n  // Generate test data\n  generateTestConfiguration: (overrides?: any) => ({\n    id: 'test-config-id',\n    serviceName: 'test-service',\n    environment: 'development',\n    version: 1,\n    config: { testKey: 'testValue' },\n    description: 'Test configuration',\n    tags: ['test'],\n    isActive: true,\n    isValid: true,\n    validationErrors: null,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    createdBy: 'test-user',\n    updatedBy: 'test-user',\n    ...overrides,\n  }),\n  \n  generateTestFeatureFlag: (overrides?: any) => ({\n    id: 'test-flag-id',\n    key: 'test_flag',\n    name: 'Test Flag',\n    description: 'Test feature flag',\n    enabled: true,\n    rolloutPercentage: 100,\n    rolloutUserGroups: [],\n    rolloutRegions: [],\n    rolloutStartDate: null,\n    rolloutEndDate: null,\n    variants: '[]',\n    dependencies: [],\n    conditions: '{}',\n    tags: ['test'],\n    environment: 'development',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    createdBy: 'test-user',\n    updatedBy: 'test-user',\n    ...overrides,\n  }),\n  \n  generateTestSecret: (overrides?: any) => ({\n    id: 'test-secret-id',\n    configurationId: 'test-config-id',\n    key: 'test-secret',\n    encryptedValue: 'encrypted-value:auth-tag',\n    iv: 'initialization-vector',\n    keyVersion: '1',\n    description: 'Test secret',\n    expiresAt: null,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    createdBy: 'test-user',\n    lastAccessedAt: null,\n    accessCount: 0,\n    ...overrides,\n  }),\n};\n\n// Extend global types\ndeclare global {\n  var testUtils: {\n    createMockPrismaClient: () => jest.Mocked<PrismaClient>;\n    createMockRedisClient: () => jest.Mocked<Redis>;\n    wait: (ms: number) => Promise<void>;\n    generateTestConfiguration: (overrides?: any) => any;\n    generateTestFeatureFlag: (overrides?: any) => any;\n    generateTestSecret: (overrides?: any) => any;\n  };\n}\n\n// Clean up after each test\nafterEach(() => {\n  jest.clearAllMocks();\n});"