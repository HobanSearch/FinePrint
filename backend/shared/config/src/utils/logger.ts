// Centralized Logging Utility for Configuration Management System
// Provides structured logging with different levels and contexts

import { NodeEnvironment, LogLevel } from '../types';\n\nexport interface LogContext {\n  service?: string;\n  userId?: string;\n  requestId?: string;\n  operation?: string;\n  duration?: number;\n  metadata?: Record<string, any>;\n}\n\nexport interface LogEntry {\n  timestamp: Date;\n  level: LogLevel;\n  message: string;\n  context?: LogContext;\n  error?: Error;\n}\n\nexport class Logger {\n  private serviceName: string;\n  private environment: NodeEnvironment;\n  private logLevel: LogLevel;\n  private enablePrettyPrint: boolean;\n  private redactFields: string[];\n\n  constructor(options: {\n    serviceName: string;\n    environment: NodeEnvironment;\n    logLevel: LogLevel;\n    enablePrettyPrint?: boolean;\n    redactFields?: string[];\n  }) {\n    this.serviceName = options.serviceName;\n    this.environment = options.environment;\n    this.logLevel = options.logLevel;\n    this.enablePrettyPrint = options.enablePrettyPrint ?? options.environment !== 'production';\n    this.redactFields = options.redactFields || ['password', 'secret', 'token', 'key', 'authorization'];\n  }\n\n  // Debug level logging\n  debug(message: string, context?: LogContext): void {\n    this.log('debug', message, context);\n  }\n\n  // Info level logging\n  info(message: string, context?: LogContext): void {\n    this.log('info', message, context);\n  }\n\n  // Warning level logging\n  warn(message: string, context?: LogContext, error?: Error): void {\n    this.log('warn', message, context, error);\n  }\n\n  // Error level logging\n  error(message: string, context?: LogContext, error?: Error): void {\n    this.log('error', message, context, error);\n  }\n\n  // Create a child logger with additional context\n  child(context: LogContext): Logger {\n    const childLogger = new Logger({\n      serviceName: this.serviceName,\n      environment: this.environment,\n      logLevel: this.logLevel,\n      enablePrettyPrint: this.enablePrettyPrint,\n      redactFields: this.redactFields,\n    });\n\n    // Override log method to include parent context\n    const originalLog = childLogger.log.bind(childLogger);\n    childLogger.log = (level: LogLevel, message: string, childContext?: LogContext, error?: Error) => {\n      const mergedContext = { ...context, ...childContext };\n      originalLog(level, message, mergedContext, error);\n    };\n\n    return childLogger;\n  }\n\n  // Timer utility for measuring operation duration\n  timer(operation: string, context?: LogContext): () => void {\n    const startTime = Date.now();\n    \n    return () => {\n      const duration = Date.now() - startTime;\n      this.info(`Operation completed: ${operation}`, {\n        ...context,\n        operation,\n        duration,\n      });\n    };\n  }\n\n  // Performance logging\n  performance(operation: string, duration: number, context?: LogContext): void {\n    const level = duration > 1000 ? 'warn' : 'info'; // Warn if operation takes > 1s\n    this.log(level, `Performance: ${operation} took ${duration}ms`, {\n      ...context,\n      operation,\n      duration,\n    });\n  }\n\n  // Audit logging for sensitive operations\n  audit(action: string, resource: string, context?: LogContext): void {\n    this.info(`Audit: ${action} on ${resource}`, {\n      ...context,\n      auditAction: action,\n      auditResource: resource,\n      auditTimestamp: new Date().toISOString(),\n    });\n  }\n\n  // Security logging\n  security(event: string, context?: LogContext): void {\n    this.warn(`Security: ${event}`, {\n      ...context,\n      securityEvent: event,\n      securityTimestamp: new Date().toISOString(),\n    });\n  }\n\n  // Core logging method\n  private log(level: LogLevel, message: string, context?: LogContext, error?: Error): void {\n    if (!this.shouldLog(level)) {\n      return;\n    }\n\n    const entry: LogEntry = {\n      timestamp: new Date(),\n      level,\n      message,\n      context: context ? this.redactSensitiveData(context) : undefined,\n      error,\n    };\n\n    if (this.enablePrettyPrint) {\n      this.prettyPrint(entry);\n    } else {\n      this.jsonPrint(entry);\n    }\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    const levels: Record<LogLevel, number> = {\n      debug: 0,\n      info: 1,\n      warn: 2,\n      error: 3,\n    };\n\n    return levels[level] >= levels[this.logLevel];\n  }\n\n  private prettyPrint(entry: LogEntry): void {\n    const timestamp = entry.timestamp.toISOString();\n    const levelColor = this.getLevelColor(entry.level);\n    const reset = '\\x1b[0m';\n    \n    let output = `${levelColor}[${entry.level.toUpperCase()}]${reset} ${timestamp} [${this.serviceName}] ${entry.message}`;\n    \n    if (entry.context) {\n      output += ` ${JSON.stringify(entry.context, null, 2)}`;\n    }\n    \n    if (entry.error) {\n      output += `\\n${entry.error.stack || entry.error.message}`;\n    }\n    \n    console.log(output);\n  }\n\n  private jsonPrint(entry: LogEntry): void {\n    const logData = {\n      timestamp: entry.timestamp.toISOString(),\n      level: entry.level,\n      service: this.serviceName,\n      environment: this.environment,\n      message: entry.message,\n      ...entry.context,\n      ...(entry.error && {\n        error: {\n          name: entry.error.name,\n          message: entry.error.message,\n          stack: entry.error.stack,\n        },\n      }),\n    };\n\n    console.log(JSON.stringify(logData));\n  }\n\n  private getLevelColor(level: LogLevel): string {\n    const colors: Record<LogLevel, string> = {\n      debug: '\\x1b[36m', // Cyan\n      info: '\\x1b[32m',  // Green\n      warn: '\\x1b[33m',  // Yellow\n      error: '\\x1b[31m', // Red\n    };\n    return colors[level];\n  }\n\n  private redactSensitiveData(context: LogContext): LogContext {\n    const redacted = { ...context };\n    \n    const redactRecursive = (obj: any): any => {\n      if (typeof obj !== 'object' || obj === null) {\n        return obj;\n      }\n      \n      if (Array.isArray(obj)) {\n        return obj.map(redactRecursive);\n      }\n      \n      const result: any = {};\n      for (const [key, value] of Object.entries(obj)) {\n        if (this.redactFields.some(field => key.toLowerCase().includes(field.toLowerCase()))) {\n          result[key] = '[REDACTED]';\n        } else {\n          result[key] = redactRecursive(value);\n        }\n      }\n      return result;\n    };\n    \n    return redactRecursive(redacted);\n  }\n}\n\n// Global logger instance\nlet globalLogger: Logger;\n\n// Initialize global logger\nexport const initializeLogger = (options: {\n  serviceName: string;\n  environment: NodeEnvironment;\n  logLevel: LogLevel;\n  enablePrettyPrint?: boolean;\n  redactFields?: string[];\n}): Logger => {\n  globalLogger = new Logger(options);\n  return globalLogger;\n};\n\n// Get global logger instance\nexport const getLogger = (): Logger => {\n  if (!globalLogger) {\n    // Fallback logger if not initialized\n    globalLogger = new Logger({\n      serviceName: 'config-service',\n      environment: 'development',\n      logLevel: 'info',\n    });\n  }\n  return globalLogger;\n};\n\n// Convenience functions using global logger\nexport const log = {\n  debug: (message: string, context?: LogContext) => getLogger().debug(message, context),\n  info: (message: string, context?: LogContext) => getLogger().info(message, context),\n  warn: (message: string, context?: LogContext, error?: Error) => getLogger().warn(message, context, error),\n  error: (message: string, context?: LogContext, error?: Error) => getLogger().error(message, context, error),\n  audit: (action: string, resource: string, context?: LogContext) => getLogger().audit(action, resource, context),\n  security: (event: string, context?: LogContext) => getLogger().security(event, context),\n  performance: (operation: string, duration: number, context?: LogContext) => getLogger().performance(operation, duration, context),\n  timer: (operation: string, context?: LogContext) => getLogger().timer(operation, context),\n};