user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Load ModSecurity module
load_module modules/ngx_http_modsecurity_module.so;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Enhanced Logging with security context
    log_format security '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time" '
                       'geoip_country=$geoip_country_code '
                       'limit_req_status=$limit_req_status '
                       'limit_conn_status=$limit_conn_status';

    access_log /var/log/nginx/access.log security;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 30;
    keepalive_requests 100;
    reset_timedout_connection on;
    client_body_timeout 10;
    client_header_timeout 10;
    send_timeout 10;
    types_hash_max_size 2048;
    server_tokens off;
    more_clear_headers Server;
    
    # Buffer size limits (prevent buffer overflow attacks)
    client_body_buffer_size 16K;
    client_header_buffer_size 1k;
    client_max_body_size 20M;
    large_client_header_buffers 4 8k;
    
    # Gzip compression with security considerations
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml application/atom+xml image/svg+xml 
               text/x-js text/x-cross-domain-policy application/x-font-ttf 
               application/x-font-opentype application/vnd.ms-fontobject 
               image/x-icon;
    gzip_disable "msie6";
    
    # Enhanced Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=()" always;
    add_header Cross-Origin-Embedder-Policy "require-corp" always;
    add_header Cross-Origin-Opener-Policy "same-origin" always;
    add_header Cross-Origin-Resource-Policy "same-origin" always;
    
    # Strict Content Security Policy
    add_header Content-Security-Policy "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://unpkg.com; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://fonts.googleapis.com; img-src 'self' data: https:; font-src 'self' data: https://fonts.gstatic.com; connect-src 'self' https: wss:; media-src 'self'; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'self'; block-all-mixed-content; upgrade-insecure-requests;" always;
    
    # Enhanced Rate Limiting Zones
    limit_req_zone $binary_remote_addr zone=general:20m rate=30r/s;
    limit_req_zone $binary_remote_addr zone=api:20m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=3r/m;
    limit_req_zone $binary_remote_addr zone=search:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=2r/s;
    limit_conn_zone $binary_remote_addr zone=addr:20m;
    limit_conn_zone $server_name zone=perserver:10m;
    
    # Request rate status logging
    limit_req_status 429;
    limit_conn_status 429;
    
    # GeoIP blocking (requires GeoIP module)
    # geoip_country /usr/share/GeoIP/GeoIP.dat;
    # map $geoip_country_code $allowed_country {
    #     default yes;
    #     CN no;  # Example: Block China
    #     RU no;  # Example: Block Russia
    # }
    
    # Bad User-Agent blocking
    map $http_user_agent $bad_bot {
        default 0;
        ~*"(bot|crawler|spider|scraper|scanner)" 1;
        ~*"(hack|attack|exploit|vulnerability)" 1;
        ~*"(nikto|nmap|masscan|wpscan)" 1;
        ~*"(sqlmap|havij|acunetix)" 1;
    }
    
    # SSL Configuration (A+ Rating)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305';
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/fineprintai.com/chain.pem;
    resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # HSTS Configuration
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    
    # ModSecurity Configuration
    modsecurity on;
    modsecurity_rules_file /etc/nginx/modsecurity/modsecurity.conf;
    
    # Upstream servers with health checks
    upstream api_backend {
        least_conn;
        server api:8000 weight=1 max_fails=2 fail_timeout=30s;
        keepalive 32;
        keepalive_timeout 60s;
    }
    
    upstream websocket_backend {
        ip_hash;
        server websocket:8001 weight=1 max_fails=2 fail_timeout=30s;
    }
    
    upstream web_frontend {
        least_conn;
        server web:3000 weight=1 max_fails=2 fail_timeout=30s;
    }
    
    # Map for WebSocket upgrade
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    
    # HTTP to HTTPS redirect with security checks
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        
        # Block bad bots
        if ($bad_bot) {
            return 444;
        }
        
        # ACME challenge for Let's Encrypt
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
            try_files $uri =404;
        }
        
        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }
    
    # HTTPS server with enhanced security
    server {
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;
        server_name fineprintai.com www.fineprintai.com;
        
        # SSL certificates
        ssl_certificate /etc/letsencrypt/live/fineprintai.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/fineprintai.com/privkey.pem;
        ssl_dhparam /etc/nginx/ssl/dhparam.pem;
        
        # Certificate pinning
        add_header Public-Key-Pins 'pin-sha256="base64+primary=="; pin-sha256="base64+backup=="; max-age=5184000; includeSubDomains' always;
        
        # Block bad bots and countries
        if ($bad_bot) {
            return 444;
        }
        
        # if ($allowed_country = no) {
        #     return 444;
        # }
        
        # Security.txt
        location /.well-known/security.txt {
            alias /etc/nginx/security.txt;
        }
        
        # Root location - Frontend with security
        location / {
            # General rate limiting
            limit_req zone=general burst=50 nodelay;
            limit_conn addr 20;
            
            proxy_pass http://web_frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_cache_bypass $http_upgrade;
            
            # Security headers for proxied requests
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
            
            # Cache static assets with security
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                proxy_pass http://web_frontend;
                expires 30d;
                add_header Cache-Control "public, immutable";
                add_header X-Content-Type-Options "nosniff" always;
                access_log off;
                
                # Prevent hotlinking
                valid_referers none blocked server_names ~\.fineprintai\.com;
                if ($invalid_referer) {
                    return 403;
                }
            }
        }
        
        # API endpoints with enhanced security
        location /api {
            # API rate limiting
            limit_req zone=api burst=20 nodelay;
            limit_conn addr 10;
            
            # ModSecurity for API
            modsecurity_rules '
                SecRuleEngine On
                SecRequestBodyAccess On
                SecResponseBodyAccess Off
                SecRequestBodyLimit 13107200
                SecRequestBodyNoFilesLimit 131072
                SecRequestBodyLimitAction Reject
            ';
            
            # Remove /api prefix when proxying
            rewrite ^/api/(.*)$ /$1 break;
            
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Disable buffering for SSE
            proxy_buffering off;
            proxy_cache off;
            
            # CORS headers (configure as needed)
            add_header Access-Control-Allow-Origin "https://fineprintai.com" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
            add_header Access-Control-Max-Age "3600" always;
        }
        
        # Authentication endpoints (strictest rate limiting)
        location ~ ^/api/(auth|login|register|reset-password|forgot-password) {
            limit_req zone=auth burst=2 nodelay;
            limit_conn addr 3;
            
            # Enhanced ModSecurity for auth endpoints
            modsecurity_rules '
                SecRuleEngine On
                SecRequestBodyAccess On
                SecRule REQUEST_URI "@contains login" "id:1001,phase:2,deny,status:429,msg:Rate limit exceeded"
                SecRule REQUEST_METHOD "POST" "chain,id:1002,phase:2,deny,status:400,msg:Invalid request"
                SecRule REQUEST_HEADERS:Content-Type "!@contains application/json"
            ';
            
            rewrite ^/api/(.*)$ /$1 break;
            
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Shorter timeouts for auth
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }
        
        # Upload endpoints with special handling
        location ~ ^/api/upload {
            limit_req zone=upload burst=5 nodelay;
            limit_conn addr 2;
            client_max_body_size 100M;
            
            # File upload security
            modsecurity_rules '
                SecRuleEngine On
                SecRequestBodyAccess On
                SecRequestBodyLimit 104857600
                SecRule FILES "@rx \.(php|phtml|php3|php4|php5|phps|phar|exe|bat|cmd|com|cgi|pl|asp|aspx|shtml|shtm|fcgi|fpl|jsp|htm|html|wss|js|vbs|ws|war)$" "id:1003,phase:2,deny,status:403,msg:Dangerous file type"
            ';
            
            rewrite ^/api/(.*)$ /$1 break;
            
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }
        
        # WebSocket endpoint with security
        location /ws {
            limit_req zone=general burst=10 nodelay;
            limit_conn addr 5;
            
            proxy_pass http://websocket_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeouts
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
        }
        
        # Health check endpoint (no logging)
        location /health {
            access_log off;
            add_header Content-Type text/plain;
            return 200 "healthy\n";
        }
        
        # Monitoring endpoints (IP restricted)
        location /metrics {
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            # Add Cloudflare IPs
            allow 173.245.48.0/20;
            allow 103.21.244.0/22;
            allow 103.22.200.0/22;
            allow 103.31.4.0/22;
            allow 141.101.64.0/18;
            allow 108.162.192.0/18;
            allow 190.93.240.0/20;
            allow 188.114.96.0/20;
            allow 197.234.240.0/22;
            allow 198.41.128.0/17;
            allow 162.158.0.0/15;
            allow 104.16.0.0/12;
            allow 172.64.0.0/13;
            allow 131.0.72.0/22;
            deny all;
            
            proxy_pass http://api_backend/metrics;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }
        
        # Grafana (with authentication)
        location /grafana/ {
            auth_basic "Restricted Access";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            # IP restrictions
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            # Add your admin IPs here
            deny all;
            
            proxy_pass http://grafana:3000/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
        
        # Block access to sensitive files
        location ~ /\.(ht|git|svn|bzr|hg|env) {
            deny all;
            return 404;
        }
        
        location ~ /\.(bak|backup|sql|old|orig|original|php~|php_bak|save|swo|swp|sh|bash|bat|cmd|ps1)$ {
            deny all;
            return 404;
        }
        
        # Block common attack patterns
        location ~ /(admin|administrator|wp-admin|phpmyadmin|pma|dbadmin|mysql|myadmin|phppgadmin|phpMyAdmin|MyAdmin) {
            deny all;
            return 404;
        }
        
        # Custom error pages with security
        error_page 400 401 402 403 404 /40x.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /40x.html {
            root /usr/share/nginx/html;
            internal;
            add_header X-Robots-Tag "noindex, nofollow" always;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
            add_header X-Robots-Tag "noindex, nofollow" always;
        }
        
        # Deny access to any other location
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
    
    # Default server to catch all unmatched requests
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name _;
        
        ssl_certificate /etc/nginx/ssl/default.crt;
        ssl_certificate_key /etc/nginx/ssl/default.key;
        
        return 444;
    }
}