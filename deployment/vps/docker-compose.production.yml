version: '3.8'

networks:
  fineprintai:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  elasticsearch_data:
    driver: local
  ssl_certs:
    driver: local

services:
  # Reverse Proxy / Load Balancer
  nginx:
    image: nginx:alpine
    container_name: fineprintai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ssl_certs:/etc/letsencrypt
    networks:
      - fineprintai
    depends_on:
      - api
      - web
      - websocket
    restart: always
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend - React Application
  web:
    build:
      context: ../../apps/web
      dockerfile: Dockerfile
    container_name: fineprintai-web
    environment:
      NODE_ENV: production
      VITE_API_URL: https://${DOMAIN_NAME}/api
      VITE_WS_URL: wss://${DOMAIN_NAME}/ws
    networks:
      - fineprintai
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Backend
  api:
    build:
      context: ../../apps/api
      dockerfile: Dockerfile
    container_name: fineprintai-api
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?ssl=true
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      QDRANT_URL: http://qdrant:6333
      OLLAMA_URL: http://ollama:11434
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      CORS_ORIGINS: https://${DOMAIN_NAME}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-1000}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      S3_BUCKET: ${S3_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
    networks:
      - fineprintai
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
    restart: always
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1024M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WebSocket Server
  websocket:
    build:
      context: ../../apps/websocket
      dockerfile: Dockerfile
    container_name: fineprintai-websocket
    environment:
      NODE_ENV: production
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    networks:
      - fineprintai
    depends_on:
      redis:
        condition: service_healthy
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker Services
  worker:
    build:
      context: ../../apps/worker
      dockerfile: Dockerfile
    container_name: fineprintai-worker
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?ssl=true
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      QDRANT_URL: http://qdrant:6333
      OLLAMA_URL: http://ollama:11434
      LOG_LEVEL: ${LOG_LEVEL:-info}
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-5}
    networks:
      - fineprintai
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 2048M
        reservations:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: fineprintai-postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - fineprintai
    restart: always
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c huge_pages=try
      -c wal_level=replica
      -c max_wal_size=2GB
      -c min_wal_size=1GB
      -c ssl=on
      -c ssl_cert_file=/etc/ssl/certs/server.crt
      -c ssl_key_file=/etc/ssl/private/server.key
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fineprintai-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory ${REDIS_MAX_MEMORY:-1gb}
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --tcp-backlog 511
      --save 900 1 300 10 60 10000
      --dir /data
    volumes:
      - redis_data:/data
    networks:
      - fineprintai
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: fineprintai-qdrant
    environment:
      QDRANT_LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - fineprintai
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4096M
        reservations:
          cpus: '0.5'
          memory: 1024M

  # Ollama AI Model Server
  ollama:
    image: ollama/ollama:latest
    container_name: fineprintai-ollama
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - fineprintai
    restart: always
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8192M
        reservations:
          cpus: '2.0'
          memory: 4096M
    environment:
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_MODELS: phi-2:2.7b,mistral:7b,llama2:13b

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: fineprintai-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - fineprintai
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2048M
        reservations:
          cpus: '0.5'
          memory: 1024M

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: fineprintai-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - fineprintai
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: fineprintai-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_ROOT_URL: https://${DOMAIN_NAME}/grafana
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: "strict"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - fineprintai
    restart: always
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Loki Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: fineprintai-loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - fineprintai
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Backup Service
  backup:
    image: alpine:latest
    container_name: fineprintai-backup
    volumes:
      - postgres_data:/backup/postgres:ro
      - redis_data:/backup/redis:ro
      - qdrant_data:/backup/qdrant:ro
      - ./scripts/backup.sh:/backup.sh:ro
      - ${BACKUP_PATH:-/backups}:/backups
    networks:
      - fineprintai
    command: /bin/sh -c "chmod +x /backup.sh && crond -f"
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M