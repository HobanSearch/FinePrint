import 'react-native-gesture-handler'\nimport React, { useEffect, useState } from 'react'\nimport { AppState, LogBox } from 'react-native'\nimport { SafeAreaProvider } from 'react-native-safe-area-context'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport * as SplashScreen from 'expo-splash-screen'\nimport * as Font from 'expo-font'\nimport * as Notifications from 'expo-notifications'\n\n// Navigation\nimport AppNavigation from './src/navigation'\n\n// Services and initialization\nimport { initializeNetworkMonitoring } from './src/services/api'\nimport { initializeNetworkMonitoring as initStoreNetworkMonitoring } from './src/stores/slices/offline'\n\n// Stores\nimport { useStoreActions } from './src/stores'\n\n// Error tracking (placeholder)\n// import * as Sentry from '@sentry/react-native'\n\n// Suppress specific warnings for development\nLogBox.ignoreLogs([\n  'Non-serializable values were found in the navigation state',\n  'AsyncStorage has been extracted from react-native',\n])\n\n// Keep splash screen visible while loading\nSplashScreen.preventAutoHideAsync()\n\n// Configure notifications\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: true,\n  }),\n})\n\n// Create React Query client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 2,\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      gcTime: 10 * 60 * 1000, // 10 minutes (formerly cacheTime)\n    },\n    mutations: {\n      retry: 1,\n    },\n  },\n})\n\ninterface AppContentProps {\n  isReady: boolean\n}\n\nfunction AppContent({ isReady }: AppContentProps) {\n  const { initialize } = useStoreActions()\n\n  useEffect(() => {\n    if (isReady) {\n      // Initialize app stores and services\n      initialize().catch(console.error)\n    }\n  }, [isReady, initialize])\n\n  if (!isReady) {\n    return null\n  }\n\n  return (\n    <AppNavigation \n      onReady={() => {\n        // Hide splash screen when navigation is ready\n        SplashScreen.hideAsync()\n      }}\n    />\n  )\n}\n\nexport default function App() {\n  const [isReady, setIsReady] = useState(false)\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        // Initialize network monitoring\n        const unsubscribeApi = initializeNetworkMonitoring()\n        const unsubscribeStore = initStoreNetworkMonitoring()\n\n        // Load fonts (if any custom fonts are needed)\n        // await Font.loadAsync({\n        //   'CustomFont': require('./assets/fonts/CustomFont.ttf'),\n        // })\n\n        // Initialize error tracking\n        // Sentry.init({\n        //   dsn: process.env.SENTRY_DSN,\n        // })\n\n        // Request notification permissions\n        await Notifications.requestPermissionsAsync()\n\n        // Add app state change listener\n        const handleAppStateChange = (nextAppState: string) => {\n          if (nextAppState === 'active') {\n            // App became active, check for updates, sync data, etc.\n            console.log('App became active')\n          }\n        }\n        \n        const subscription = AppState.addEventListener('change', handleAppStateChange)\n\n        // Simulate loading time (remove in production)\n        await new Promise(resolve => setTimeout(resolve, 1500))\n\n        // Cleanup function\n        return () => {\n          unsubscribeApi()\n          unsubscribeStore()\n          subscription?.remove()\n        }\n      } catch (error) {\n        console.error('App initialization failed:', error)\n      } finally {\n        setIsReady(true)\n      }\n    }\n\n    prepare()\n  }, [])\n\n  return (\n    <SafeAreaProvider>\n      <QueryClientProvider client={queryClient}>\n        <AppContent isReady={isReady} />\n      </QueryClientProvider>\n    </SafeAreaProvider>\n  )\n}\n\n// Enable Flipper for development\nif (__DEV__) {\n  require('./ReactotronConfig').default\n}"