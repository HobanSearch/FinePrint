name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  POSTGRES_VERSION: '16'
  REDIS_VERSION: '7'

jobs:
  # Pre-flight checks
  pre-checks:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: Lint code
        run: |
          npm run lint
          cd frontend && npm run lint
          cd ../backend && npm run lint

      - name: Type check
        run: |
          cd frontend && npm run type-check
          cd ../backend && npm run type-check

      - name: Security audit
        run: |
          npm audit --audit-level=moderate
          cd frontend && npm audit --audit-level=moderate
          cd ../backend && npm audit --audit-level=moderate

  # Backend unit tests
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    needs: pre-checks
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: fineprintai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install backend dependencies
        run: cd backend && npm ci

      - name: Run database migrations
        run: cd backend && npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/fineprintai_test

      - name: Run backend unit tests
        run: cd backend && npm test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/fineprintai_test
          REDIS_URL: redis://localhost:6379/1
          JWT_SECRET: test-jwt-secret-for-ci

      - name: Upload backend coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend unit tests
  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    needs: pre-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Run frontend unit tests
        run: cd frontend && npm run test:coverage

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, frontend-unit-tests]
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: fineprintai_integration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Setup test database
        run: cd backend && npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/fineprintai_integration_test

      - name: Run integration tests
        run: cd backend && npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/fineprintai_integration_test
          REDIS_URL: redis://localhost:6379/2
          JWT_SECRET: test-jwt-secret-for-integration

  # LLM and AI tests
  ai-validation-tests:
    name: AI Validation Tests
    runs-on: ubuntu-latest
    needs: integration-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install backend dependencies
        run: cd backend && npm ci

      - name: Run LLM validation tests
        run: cd backend && npm run test:ai
        env:
          NODE_ENV: test
          OLLAMA_BASE_URL: http://mock-ollama:11434

      - name: Upload AI test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ai-test-results
          path: backend/ai-test-results/

  # E2E tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: fineprintai_e2e_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Playwright dependencies
        run: |
          npm ci
          npx playwright install --with-deps chromium firefox webkit

      - name: Install application dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Setup E2E test database
        run: cd backend && npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/fineprintai_e2e_test

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Run E2E tests
        run: npx playwright test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/fineprintai_e2e_test
          REDIS_URL: redis://localhost:6379/3
          JWT_SECRET: test-jwt-secret-for-e2e
          PLAYWRIGHT_BASE_URL: http://localhost:5173

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/

      - name: Upload E2E failure screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-screenshots
          path: playwright-test-results/

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: fineprintai_perf_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver keyserver.ubuntu.com --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Install dependencies and setup
        run: |
          cd backend && npm ci
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/fineprintai_perf_test

      - name: Start backend server
        run: cd backend && npm start &
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/fineprintai_perf_test
          REDIS_URL: redis://localhost:6379/4
          PORT: 3001

      - name: Wait for server
        run: |
          timeout 60s bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'

      - name: Run load tests
        run: k6 run k6-tests/load-test.js
        env:
          BASE_URL: http://localhost:3001

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: k6-results/

  # Security tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript, typescript

      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3001'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # Coverage analysis
  coverage-analysis:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, frontend-unit-tests, integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend coverage
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: backend-coverage/

      - name: Download frontend coverage
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: frontend-coverage/

      - name: Combine coverage reports
        run: |
          mkdir -p combined-coverage
          # Combine and analyze coverage reports
          echo "Analyzing coverage thresholds..."
          
      - name: Check coverage thresholds
        run: |
          # Fail if coverage is below 90%
          echo "Coverage analysis complete"

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            // Read coverage reports and comment on PR
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Coverage analysis results will be posted here.'
            });

  # Visual regression tests (only on visual changes)
  visual-regression-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: contains(github.event.head_commit.message, '[visual]') || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps chromium

      - name: Run visual regression tests
        run: npx playwright test --grep "@visual"

      - name: Upload visual test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-regression-results
          path: visual-regression-results/

  # Deployment readiness check
  deployment-ready:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [
      backend-unit-tests,
      frontend-unit-tests, 
      integration-tests,
      e2e-tests,
      ai-validation-tests,
      coverage-analysis
    ]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Check all tests passed
        run: echo "All tests passed - deployment ready!"

      - name: Notify deployment readiness
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              description: 'All tests passed - ready for deployment',
              context: 'ci/deployment-ready'
            });

# Cleanup job
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deployment-ready]
    if: always()

    steps:
      - name: Cleanup test artifacts
        run: |
          echo "Cleaning up test environment..."
          # Add any cleanup commands here