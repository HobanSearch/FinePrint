# Docker Compose configuration for PgBouncer connection pooling
# Production-ready setup with monitoring and high availability

version: '3.8'

services:
  # Primary PgBouncer instance
  pgbouncer-primary:
    image: pgbouncer/pgbouncer:1.21.0
    container_name: fineprintai-pgbouncer-primary
    restart: unless-stopped
    ports:
      - "6432:6432"    # PgBouncer port
      - "9127:9127"    # Metrics port
    environment:
      # Database configuration
      - DATABASES_HOST=postgres-primary
      - DATABASES_PORT=5432
      - DATABASES_USER=fineprintai_app
      - DATABASES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASES_DBNAME=fineprintai
      
      # Pool configuration
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=10000
      - DEFAULT_POOL_SIZE=100
      - MIN_POOL_SIZE=10
      - RESERVE_POOL_SIZE=20
      
      # Performance tuning
      - SERVER_LIFETIME=3600
      - SERVER_IDLE_TIMEOUT=600
      - QUERY_TIMEOUT=300
      - QUERY_WAIT_TIMEOUT=120
      
      # Authentication
      - AUTH_TYPE=md5
      - AUTH_FILE=/etc/pgbouncer/userlist.txt
      
      # Admin settings
      - ADMIN_USERS=fineprintai_admin,postgres
      - STATS_USERS=fineprintai_stats,fineprintai_monitor
      
      # Logging
      - LOG_CONNECTIONS=1
      - LOG_DISCONNECTIONS=1
      - VERBOSE=1
      
    volumes:
      - ./pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./userlist.txt:/etc/pgbouncer/userlist.txt:ro
      - ./ssl:/etc/pgbouncer/ssl:ro
      - pgbouncer-logs:/var/log/pgbouncer
      - /var/run/pgbouncer:/var/run/pgbouncer
    networks:
      - fineprintai-network
    depends_on:
      - postgres-primary
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 6432 -U fineprintai_app"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    labels:
      - "traefik.enable=false"
      - "monitoring.scrape=true"
      - "monitoring.port=9127"
      - "monitoring.path=/metrics"

  # Secondary PgBouncer for high availability
  pgbouncer-secondary:
    image: pgbouncer/pgbouncer:1.21.0
    container_name: fineprintai-pgbouncer-secondary
    restart: unless-stopped
    ports:
      - "6433:6432"    # Alternative port
      - "9128:9127"    # Metrics port
    environment:
      # Same configuration as primary
      - DATABASES_HOST=postgres-replica
      - DATABASES_PORT=5432
      - DATABASES_USER=fineprintai_readonly
      - DATABASES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASES_DBNAME=fineprintai
      
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=5000     # Smaller pool for read replica
      - DEFAULT_POOL_SIZE=50
      - MIN_POOL_SIZE=5
      - RESERVE_POOL_SIZE=10
      
      - SERVER_LIFETIME=3600
      - SERVER_IDLE_TIMEOUT=600
      - QUERY_TIMEOUT=300
      - QUERY_WAIT_TIMEOUT=120
      
      - AUTH_TYPE=md5
      - AUTH_FILE=/etc/pgbouncer/userlist.txt
      
      - ADMIN_USERS=fineprintai_admin,postgres
      - STATS_USERS=fineprintai_stats,fineprintai_monitor
      
      - LOG_CONNECTIONS=1
      - LOG_DISCONNECTIONS=1
      - VERBOSE=1
      
    volumes:
      - ./pgbouncer-readonly.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./userlist.txt:/etc/pgbouncer/userlist.txt:ro
      - ./ssl:/etc/pgbouncer/ssl:ro
      - pgbouncer-logs-secondary:/var/log/pgbouncer
    networks:
      - fineprintai-network
    depends_on:
      - postgres-replica
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 6432 -U fineprintai_readonly"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # HAProxy for load balancing between PgBouncer instances
  pgbouncer-lb:
    image: haproxy:2.8-alpine
    container_name: fineprintai-pgbouncer-lb
    restart: unless-stopped
    ports:
      - "5432:5432"    # Standard PostgreSQL port
      - "8404:8404"    # HAProxy stats
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    networks:
      - fineprintai-network
    depends_on:
      - pgbouncer-primary
      - pgbouncer-secondary
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 5432"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # PgBouncer metrics exporter for Prometheus
  pgbouncer-exporter:
    image: prometheuscommunity/pgbouncer-exporter:v0.7.0
    container_name: fineprintai-pgbouncer-exporter
    restart: unless-stopped
    ports:
      - "9127:9127"
    environment:
      - PGBOUNCER_EXPORTER_HOST=pgbouncer-primary
      - PGBOUNCER_EXPORTER_PORT=6432
      - PGBOUNCER_EXPORTER_USERNAME=fineprintai_stats
      - PGBOUNCER_EXPORTER_PASSWORD=${PGBOUNCER_STATS_PASSWORD}
      - PGBOUNCER_EXPORTER_DATABASE=pgbouncer
    networks:
      - fineprintai-network
    depends_on:
      - pgbouncer-primary
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'

  # Database instances (referenced by PgBouncer)
  postgres-primary:
    image: postgres:16-alpine
    container_name: fineprintai-postgres-primary
    restart: unless-stopped
    ports:
      - "5433:5432"    # Non-standard port to avoid conflicts
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=fineprintai
      - POSTGRES_INITDB_ARGS=--auth-host=md5 --auth-local=trust
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c max_connections=500
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c wal_level=replica
      -c archive_mode=on
      -c archive_command='cp %p /var/lib/postgresql/archive/%f'
      -c max_wal_senders=3
      -c wal_keep_size=1GB
    networks:
      - fineprintai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  postgres-replica:
    image: postgres:16-alpine
    container_name: fineprintai-postgres-replica
    restart: unless-stopped
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=fineprintai
      - PGUSER=postgres
    volumes:
      - postgres-replica-data:/var/lib/postgresql/data
      - ./recovery.conf:/var/lib/postgresql/recovery.conf:ro
    command: >
      bash -c "
      echo 'standby_mode = on' >> /var/lib/postgresql/data/recovery.conf &&
      echo 'primary_conninfo = \"host=postgres-primary port=5432 user=replicator\"' >> /var/lib/postgresql/data/recovery.conf &&
      postgres -c config_file=/etc/postgresql/postgresql.conf
      "
    networks:
      - fineprintai-network
    depends_on:
      - postgres-primary
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

networks:
  fineprintai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-primary-data:
    driver: local
  postgres-replica-data:
    driver: local
  pgbouncer-logs:
    driver: local
  pgbouncer-logs-secondary:
    driver: local