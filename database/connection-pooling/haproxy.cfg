# HAProxy Configuration for PgBouncer Load Balancing
# Provides high availability and load distribution for database connections

global
    daemon
    maxconn 10000
    log stdout local0 info
    
    # Performance tuning
    tune.ssl.default-dh-param 2048
    tune.bufsize 32768
    tune.maxrewrite 1024
    
    # Security
    user haproxy
    group haproxy
    chroot /var/lib/haproxy
    
    # Stats socket for management
    stats socket /var/run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s

defaults
    mode tcp
    log global
    option tcplog
    option dontlognull
    option tcp-smart-accept
    option tcp-smart-connect
    
    # Timeouts optimized for database connections
    timeout connect 10s
    timeout client 300s
    timeout server 300s
    timeout check 5s
    
    # Connection limits
    maxconn 8000
    
    # Health check settings
    default-server inter 10s downinter 5s rise 2 fall 3 slowstart 60s maxconn 500 maxqueue 256 weight 100

# Statistics interface
frontend stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 30s
    stats realm HAProxy\ Statistics
    stats auth admin:${HAPROXY_STATS_PASSWORD}
    stats admin if TRUE
    
    # Custom stats page styling
    stats show-legends
    stats show-node
    stats show-desc
    
    # Health check endpoint
    monitor-uri /health

# Frontend for primary database connections (read/write)
frontend database_primary
    bind *:5432
    mode tcp
    
    # Connection rate limiting
    stick-table type ip size 100k expire 30s store conn_rate(10s)
    tcp-request connection track-sc1 src
    tcp-request connection reject if { sc_conn_rate(1) gt 100 }
    
    # Route to primary backend
    default_backend pgbouncer_primary

# Frontend for read-only connections
frontend database_readonly
    bind *:5433
    mode tcp
    
    # Connection rate limiting
    stick-table type ip size 100k expire 30s store conn_rate(10s)
    tcp-request connection track-sc1 src
    tcp-request connection reject if { sc_conn_rate(1) gt 200 }
    
    # Route to read-only backend
    default_backend pgbouncer_readonly

# Backend for primary PgBouncer instances (read/write workload)
backend pgbouncer_primary
    mode tcp
    balance roundrobin
    
    # Health check configuration
    option tcp-check
    tcp-check send-binary 00000016 # packet length
    tcp-check send-binary 00030000 # protocol version
    tcp-check send-binary 7573657200 # "user"
    tcp-check send-binary 66696e657072696e7461695f61707000 # "fineprintai_app"
    tcp-check send-binary 646174616261736500 # "database"
    tcp-check send-binary 66696e657072696e74616900 # "fineprintai"
    tcp-check send-binary 00 # end of parameters
    tcp-check expect binary 52 # Authentication request (R)
    
    # Primary PgBouncer instance
    server pgbouncer-primary pgbouncer-primary:6432 check
    
    # Backup instances (if available)
    # server pgbouncer-backup pgbouncer-backup:6432 check backup

# Backend for read-only PgBouncer instances
backend pgbouncer_readonly
    mode tcp
    balance leastconn  # Use least connections for read workload
    
    # Health check
    option tcp-check
    tcp-check send-binary 00000016
    tcp-check send-binary 00030000
    tcp-check send-binary 7573657200
    tcp-check send-binary 66696e657072696e7461695f726561646f6e6c7900 # "fineprintai_readonly"
    tcp-check send-binary 646174616261736500
    tcp-check send-binary 66696e657072696e74616900
    tcp-check send-binary 00
    tcp-check expect binary 52
    
    # Read-only PgBouncer instances
    server pgbouncer-secondary pgbouncer-secondary:6432 check
    
    # Additional read replicas can be added here
    # server pgbouncer-readonly-2 pgbouncer-readonly-2:6432 check
    # server pgbouncer-readonly-3 pgbouncer-readonly-3:6432 check

# Backend for emergency direct database access (admin only)
backend postgres_direct
    mode tcp
    balance first
    
    # Direct connection to primary database (bypassing PgBouncer)
    server postgres-primary postgres-primary:5432 check backup
    server postgres-replica postgres-replica:5432 check

# Listen for admin connections with special routing
listen admin_database
    bind *:5435
    mode tcp
    
    # Restrict to admin IPs only
    tcp-request connection reject unless { src -f /usr/local/etc/haproxy/admin-ips.txt }
    
    # Route admin connections directly to database
    server postgres-admin postgres-primary:5432 check

# Error pages and maintenance
errorfile 503 /usr/local/etc/haproxy/errors/503.http
errorfile 504 /usr/local/etc/haproxy/errors/504.http

# Custom error handling for database unavailability
backend maintenance
    mode http
    errorfile 503 /usr/local/etc/haproxy/errors/database-maintenance.http