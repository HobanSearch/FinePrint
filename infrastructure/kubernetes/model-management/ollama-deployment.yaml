apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ollama-llama
  namespace: model-management
  labels:
    app: ollama
    model: llama3-70b
    tier: gpu
spec:
  serviceName: ollama-llama-service
  replicas: 2
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: ollama
      model: llama3-70b
  template:
    metadata:
      labels:
        app: ollama
        model: llama3-70b
        tier: gpu
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "11434"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nvidia.com/gpu
                operator: Exists
              - key: node.kubernetes.io/instance-type
                operator: In
                values:
                - p3.2xlarge
                - p3.8xlarge
                - g4dn.xlarge
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      - key: spot-instance
        operator: Equal
        value: "true"
        effect: NoSchedule
      initContainers:
      - name: model-downloader
        image: ollama/ollama:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          ollama serve &
          sleep 5
          ollama pull llama3:70b || true
          pkill ollama
        volumeMounts:
        - name: models
          mountPath: /root/.ollama
        resources:
          requests:
            cpu: 2
            memory: 8Gi
          limits:
            cpu: 4
            memory: 16Gi
      containers:
      - name: ollama
        image: ollama/ollama:latest
        ports:
        - containerPort: 11434
          name: api
          protocol: TCP
        env:
        - name: OLLAMA_HOST
          value: "0.0.0.0:11434"
        - name: OLLAMA_MODELS
          value: "/models"
        - name: OLLAMA_NUM_PARALLEL
          value: "2"
        - name: OLLAMA_MAX_LOADED_MODELS
          value: "1"
        - name: OLLAMA_GPU_LAYERS
          value: "35"
        - name: OLLAMA_KEEP_ALIVE
          value: "5m"
        - name: NVIDIA_VISIBLE_DEVICES
          value: "all"
        - name: NVIDIA_DRIVER_CAPABILITIES
          value: "compute,utility"
        resources:
          requests:
            cpu: 4
            memory: 40Gi
            nvidia.com/gpu: 1
          limits:
            cpu: 8
            memory: 48Gi
            nvidia.com/gpu: 1
        volumeMounts:
        - name: models
          mountPath: /root/.ollama
        - name: cache
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /
            port: api
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "curl -f http://localhost:11434/api/tags | grep -q llama3"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 30"]
      volumes:
      - name: cache
        emptyDir:
          sizeLimit: 50Gi
  volumeClaimTemplates:
  - metadata:
      name: models
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 200Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama-qwen
  namespace: model-management
  labels:
    app: ollama
    model: qwen2-5-32b
    tier: gpu
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ollama
      model: qwen2-5-32b
  template:
    metadata:
      labels:
        app: ollama
        model: qwen2-5-32b
        tier: gpu
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "11434"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nvidia.com/gpu
                operator: Exists
              - key: node.kubernetes.io/instance-type
                operator: In
                values:
                - p3.2xlarge
                - g4dn.xlarge
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      - key: spot-instance
        operator: Equal
        value: "true"
        effect: PreferNoSchedule
      containers:
      - name: ollama
        image: ollama/ollama:latest
        ports:
        - containerPort: 11434
          name: api
        env:
        - name: OLLAMA_HOST
          value: "0.0.0.0:11434"
        - name: OLLAMA_NUM_PARALLEL
          value: "3"
        - name: OLLAMA_MAX_LOADED_MODELS
          value: "1"
        - name: OLLAMA_KEEP_ALIVE
          value: "5m"
        resources:
          requests:
            cpu: 2
            memory: 20Gi
            nvidia.com/gpu: 1
          limits:
            cpu: 4
            memory: 24Gi
            nvidia.com/gpu: 1
        volumeMounts:
        - name: models
          mountPath: /root/.ollama
        livenessProbe:
          httpGet:
            path: /
            port: api
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/tags
            port: api
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: models
        persistentVolumeClaim:
          claimName: ollama-models-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama-gpt-oss
  namespace: model-management
  labels:
    app: ollama
    model: gpt-oss-35b
    tier: gpu
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ollama
      model: gpt-oss-35b
  template:
    metadata:
      labels:
        app: ollama
        model: gpt-oss-35b
        tier: gpu
      annotations:
        prometheus.io/scrape: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nvidia.com/gpu
                operator: Exists
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      - key: spot-instance
        operator: Equal
        value: "true"
        effect: PreferNoSchedule
      containers:
      - name: ollama
        image: ollama/ollama:latest
        ports:
        - containerPort: 11434
          name: api
        env:
        - name: OLLAMA_HOST
          value: "0.0.0.0:11434"
        - name: OLLAMA_NUM_PARALLEL
          value: "3"
        resources:
          requests:
            cpu: 2
            memory: 22Gi
            nvidia.com/gpu: 1
          limits:
            cpu: 4
            memory: 26Gi
            nvidia.com/gpu: 1
        volumeMounts:
        - name: models
          mountPath: /root/.ollama
        livenessProbe:
          httpGet:
            path: /
            port: api
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/tags
            port: api
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: models
        persistentVolumeClaim:
          claimName: ollama-models-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama-business-models
  namespace: model-management
  labels:
    app: ollama
    model: business
    tier: cpu
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: ollama
      model: business
  template:
    metadata:
      labels:
        app: ollama
        model: business
        tier: cpu
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "11434"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ollama
                - key: model
                  operator: In
                  values:
                  - business
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: workload-type
                operator: In
                values:
                - cpu-optimized
                - general
      tolerations:
      - key: spot-instance
        operator: Equal
        value: "true"
        effect: PreferNoSchedule
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: ollama
            model: business
      initContainers:
      - name: model-preloader
        image: ollama/ollama:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          ollama serve &
          sleep 5
          
          # Pull business-specific models
          ollama pull fineprint/legal-analysis:latest || true
          ollama pull fineprint/risk-assessment:latest || true
          ollama pull fineprint/summary:latest || true
          ollama pull fineprint/recommendations:latest || true
          
          pkill ollama
        volumeMounts:
        - name: models
          mountPath: /root/.ollama
        resources:
          requests:
            cpu: 1
            memory: 4Gi
          limits:
            cpu: 2
            memory: 8Gi
      containers:
      - name: ollama
        image: ollama/ollama:latest
        ports:
        - containerPort: 11434
          name: api
          protocol: TCP
        env:
        - name: OLLAMA_HOST
          value: "0.0.0.0:11434"
        - name: OLLAMA_NUM_PARALLEL
          value: "8"
        - name: OLLAMA_MAX_LOADED_MODELS
          value: "4"
        - name: OLLAMA_KEEP_ALIVE
          value: "10m"
        - name: OLLAMA_DEBUG
          value: "false"
        resources:
          requests:
            cpu: 2
            memory: 8Gi
          limits:
            cpu: 4
            memory: 16Gi
        volumeMounts:
        - name: models
          mountPath: /root/.ollama
        - name: cache
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /
            port: api
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              curl -s http://localhost:11434/api/tags | grep -q "fineprint"
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 5
        startupProbe:
          httpGet:
            path: /
            port: api
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
      volumes:
      - name: models
        persistentVolumeClaim:
          claimName: ollama-models-pvc
      - name: cache
        emptyDir:
          sizeLimit: 20Gi