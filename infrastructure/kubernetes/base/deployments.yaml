# Production-ready deployments for Fine Print AI services

# Analysis Service Deployment - Production
apiVersion: apps/v1
kind: Deployment
metadata:
  name: analysis-service
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: analysis
    app.kubernetes.io/part-of: fineprintai-platform
    app.kubernetes.io/managed-by: kubernetes
    environment: production
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app.kubernetes.io/name: fineprintai
      app.kubernetes.io/component: analysis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fineprintai
        app.kubernetes.io/component: analysis
        app.kubernetes.io/part-of: fineprintai-platform
        environment: production
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: fineprintai-analysis
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: analysis
          image: fineprintai/analysis-service:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          env:
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: fineprintai-config
                  key: NODE_ENV
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: fineprintai-config
                  key: PORT
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: fineprintai-config
                  key: LOG_LEVEL
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: fineprintai-secrets
                  key: DATABASE_URL
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: fineprintai-secrets
                  key: REDIS_URL
            - name: QDRANT_HOST
              valueFrom:
                configMapKeyRef:
                  name: fineprintai-config
                  key: QDRANT_HOST
            - name: OLLAMA_HOST
              valueFrom:
                configMapKeyRef:
                  name: fineprintai-config
                  key: OLLAMA_HOST
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: fineprintai-secrets
                  key: JWT_SECRET
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: fineprintai-secrets
                  key: SENTRY_DSN
          envFrom:
            - configMapRef:
                name: fineprintai-config
            - secretRef:
                name: fineprintai-secrets
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              cpu: 2
              memory: 4Gi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /startup
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 30
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
            - name: app-logs
              mountPath: /app/logs
      volumes:
        - name: tmp-volume
          emptyDir: {}
        - name: app-logs
          emptyDir: {}
      imagePullSecrets:
        - name: docker-registry-secret
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/component
                      operator: In
                      values:
                        - analysis
                topologyKey: kubernetes.io/hostname

---
# WebSocket Service Deployment - Production
apiVersion: apps/v1
kind: Deployment
metadata:
  name: websocket-service
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: websocket
    app.kubernetes.io/part-of: fineprintai-platform
    environment: production
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0%
  selector:
    matchLabels:
      app.kubernetes.io/name: fineprintai
      app.kubernetes.io/component: websocket
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fineprintai
        app.kubernetes.io/component: websocket
        app.kubernetes.io/part-of: fineprintai-platform
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: fineprintai-websocket
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: websocket
          image: fineprintai/websocket-service:latest
          imagePullPolicy: Always
          ports:
            - name: websocket
              containerPort: 8001
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          env:
            - name: WEBSOCKET_PORT
              valueFrom:
                configMapKeyRef:
                  name: fineprintai-config
                  key: WEBSOCKET_PORT
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: fineprintai-secrets
                  key: REDIS_URL
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: fineprintai-secrets
                  key: JWT_SECRET
          envFrom:
            - configMapRef:
                name: fineprintai-config
          resources:
            requests:
              cpu: 250m
              memory: 512Mi
            limits:
              cpu: 1
              memory: 2Gi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL
          livenessProbe:
            httpGet:
              path: /health
              port: websocket
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: websocket
            initialDelaySeconds: 5
            periodSeconds: 5
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
      volumes:
        - name: tmp-volume
          emptyDir: {}
      imagePullSecrets:
        - name: docker-registry-secret
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/component
                      operator: In
                      values:
                        - websocket
                topologyKey: kubernetes.io/hostname

---
# Gateway Service Deployment - Production
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-service
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: gateway
    app.kubernetes.io/part-of: fineprintai-platform
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app.kubernetes.io/name: fineprintai
      app.kubernetes.io/component: gateway
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fineprintai
        app.kubernetes.io/component: gateway
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: fineprintai-gateway
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
        - name: gateway
          image: fineprintai/gateway-service:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          envFrom:
            - configMapRef:
                name: fineprintai-config
          resources:
            requests:
              cpu: 250m
              memory: 512Mi
            limits:
              cpu: 1
              memory: 1Gi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
      volumes:
        - name: tmp-volume
          emptyDir: {}
      imagePullSecrets:
        - name: docker-registry-secret

---
# Notification Service Deployment - Production
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: notification
    environment: production
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: fineprintai
      app.kubernetes.io/component: notification
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fineprintai
        app.kubernetes.io/component: notification
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: fineprintai-notification
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
        - name: notification
          image: fineprintai/notification-service:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: fineprintai-secrets
                  key: DATABASE_URL
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: fineprintai-secrets
                  key: REDIS_URL
            - name: SENDGRID_API_KEY
              valueFrom:
                secretKeyRef:
                  name: fineprintai-secrets
                  key: SENDGRID_API_KEY
          envFrom:
            - configMapRef:
                name: fineprintai-config
          resources:
            requests:
              cpu: 250m
              memory: 512Mi
            limits:
              cpu: 500m
              memory: 1Gi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
      volumes:
        - name: tmp-volume
          emptyDir: {}
      imagePullSecrets:
        - name: docker-registry-secret

---
# Monitoring Service Deployment - Production
apiVersion: apps/v1
kind: Deployment
metadata:
  name: monitoring-service
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: monitoring
    environment: production
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: fineprintai
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fineprintai
        app.kubernetes.io/component: monitoring
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: fineprintai-monitoring
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
        - name: monitoring
          image: fineprintai/monitoring-service:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: fineprintai-secrets
                  key: DATABASE_URL
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: fineprintai-secrets
                  key: REDIS_URL
          envFrom:
            - configMapRef:
                name: fineprintai-config
          resources:
            requests:
              cpu: 250m
              memory: 512Mi
            limits:
              cpu: 1
              memory: 1Gi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
      volumes:
        - name: tmp-volume
          emptyDir: {}
      imagePullSecrets:
        - name: docker-registry-secret