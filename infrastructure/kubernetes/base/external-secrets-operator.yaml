# External Secrets Operator with HashiCorp Vault Integration
apiVersion: v1
kind: Namespace
metadata:
  name: external-secrets-system
  labels:
    name: external-secrets-system
    app.kubernetes.io/name: external-secrets-operator
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted

---
# External Secrets Operator ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-operator
  namespace: external-secrets-system
  labels:
    app.kubernetes.io/name: external-secrets-operator
    app.kubernetes.io/component: controller

---
# External Secrets Operator ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-operator
  labels:
    app.kubernetes.io/name: external-secrets-operator
rules:
- apiGroups: ["external-secrets.io"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["secrets", "configmaps", "events"]
  verbs: ["*"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]

---
# External Secrets Operator ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-operator
  labels:
    app.kubernetes.io/name: external-secrets-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets-operator
subjects:
- kind: ServiceAccount
  name: external-secrets-operator
  namespace: external-secrets-system

---
# External Secrets Operator Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-secrets-operator
  namespace: external-secrets-system
  labels:
    app.kubernetes.io/name: external-secrets-operator
    app.kubernetes.io/component: controller
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: external-secrets-operator
      app.kubernetes.io/component: controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: external-secrets-operator
        app.kubernetes.io/component: controller
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: external-secrets-operator
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: external-secrets-operator
        image: ghcr.io/external-secrets/external-secrets:v0.9.11
        imagePullPolicy: Always
        args:
          - --enable-leader-election
          - --metrics-addr=:8080
          - --concurrent=5
          - --zap-log-level=info
          - --zap-encoder=console
        ports:
        - name: metrics
          containerPort: 8080
          protocol: TCP
        - name: webhook
          containerPort: 9443
          protocol: TCP
        env:
        - name: EXTERNAL_SECRETS_LEADER_ELECTION_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
              - ALL
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: tmp-volume
        emptyDir:
          sizeLimit: 1Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: external-secrets-operator
              topologyKey: kubernetes.io/hostname

---
# External Secrets Operator Service
apiVersion: v1
kind: Service
metadata:
  name: external-secrets-operator
  namespace: external-secrets-system
  labels:
    app.kubernetes.io/name: external-secrets-operator
    app.kubernetes.io/component: controller
spec:
  type: ClusterIP
  ports:
  - name: metrics
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: webhook
    port: 443
    targetPort: 9443
    protocol: TCP
  selector:
    app.kubernetes.io/name: external-secrets-operator
    app.kubernetes.io/component: controller

---
# HashiCorp Vault ClusterSecretStore for Fine Print AI
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: vault-backend
  labels:
    app.kubernetes.io/name: vault-secret-store
    app.kubernetes.io/component: secret-management
spec:
  provider:
    vault:
      server: "https://vault.fineprintai.internal:8200"
      path: "fineprintai"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "external-secrets-operator"
          serviceAccountRef:
            name: "vault-auth"
            namespace: "external-secrets-system"
      caBundle: |
        -----BEGIN CERTIFICATE-----
        # Your Vault CA certificate here
        # This should be replaced with actual Vault CA certificate
        -----END CERTIFICATE-----

---
# Vault Authentication ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-auth
  namespace: external-secrets-system
  labels:
    app.kubernetes.io/name: vault-auth
    app.kubernetes.io/component: authentication

---
# Fine Print AI Production Secrets - Database
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-secrets
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: database-secrets
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: fineprintai-database-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        DATABASE_URL: "postgresql://{{ .username }}:{{ .password }}@postgres-service:5432/fineprintai"
        POSTGRES_USER: "{{ .username }}"
        POSTGRES_PASSWORD: "{{ .password }}"
        POSTGRES_DB: "fineprintai"
        REDIS_URL: "redis://:{{ .redis_password }}@redis-service:6379"
        REDIS_PASSWORD: "{{ .redis_password }}"
  data:
  - secretKey: username
    remoteRef:
      key: database/postgres
      property: username
  - secretKey: password
    remoteRef:
      key: database/postgres
      property: password
  - secretKey: redis_password
    remoteRef:
      key: database/redis
      property: password

---
# Fine Print AI Production Secrets - AI/ML Services
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: aiml-secrets
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: aiml-secrets
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: fineprintai-aiml-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        OPENAI_API_KEY: "{{ .openai_api_key }}"
        HUGGINGFACE_API_TOKEN: "{{ .huggingface_token }}"
        WANDB_API_KEY: "{{ .wandb_api_key }}"
        QDRANT_API_KEY: "{{ .qdrant_api_key }}"
        NEO4J_PASSWORD: "{{ .neo4j_password }}"
        OLLAMA_API_KEY: "{{ .ollama_api_key }}"
  data:
  - secretKey: openai_api_key
    remoteRef:
      key: aiml/openai
      property: api_key
  - secretKey: huggingface_token
    remoteRef:
      key: aiml/huggingface
      property: token
  - secretKey: wandb_api_key
    remoteRef:
      key: aiml/wandb
      property: api_key
  - secretKey: qdrant_api_key
    remoteRef:
      key: aiml/qdrant
      property: api_key
  - secretKey: neo4j_password
    remoteRef:
      key: aiml/neo4j
      property: password
  - secretKey: ollama_api_key
    remoteRef:
      key: aiml/ollama
      property: api_key

---
# Fine Print AI Production Secrets - Cloud Services
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: cloud-secrets
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: cloud-secrets
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: fineprintai-cloud-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        AWS_ACCESS_KEY_ID: "{{ .aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ .aws_secret_access_key }}"
        AWS_REGION: "{{ .aws_region }}"
        S3_BUCKET: "{{ .s3_bucket }}"
        STRIPE_SECRET_KEY: "{{ .stripe_secret_key }}"
        STRIPE_WEBHOOK_SECRET: "{{ .stripe_webhook_secret }}"
        SENDGRID_API_KEY: "{{ .sendgrid_api_key }}"
        SENTRY_DSN: "{{ .sentry_dsn }}"
  data:
  - secretKey: aws_access_key_id
    remoteRef:
      key: cloud/aws
      property: access_key_id
  - secretKey: aws_secret_access_key
    remoteRef:
      key: cloud/aws
      property: secret_access_key
  - secretKey: aws_region
    remoteRef:
      key: cloud/aws
      property: region
  - secretKey: s3_bucket
    remoteRef:
      key: cloud/aws
      property: s3_bucket
  - secretKey: stripe_secret_key
    remoteRef:
      key: payments/stripe
      property: secret_key
  - secretKey: stripe_webhook_secret
    remoteRef:
      key: payments/stripe
      property: webhook_secret
  - secretKey: sendgrid_api_key
    remoteRef:
      key: communications/sendgrid
      property: api_key
  - secretKey: sentry_dsn
    remoteRef:
      key: monitoring/sentry
      property: dsn

---
# Fine Print AI Production Secrets - Application
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: application-secrets
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: application-secrets
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: fineprintai-application-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        JWT_SECRET: "{{ .jwt_secret }}"
        ENCRYPTION_KEY: "{{ .encryption_key }}"
        SESSION_SECRET: "{{ .session_secret }}"
        WEBHOOK_SECRET: "{{ .webhook_secret }}"
        API_KEY_SALT: "{{ .api_key_salt }}"
        COOKIE_SECRET: "{{ .cookie_secret }}"
        OAUTH_CLIENT_ID: "{{ .oauth_client_id }}"
        OAUTH_CLIENT_SECRET: "{{ .oauth_client_secret }}"
  data:
  - secretKey: jwt_secret
    remoteRef:
      key: application/auth
      property: jwt_secret
  - secretKey: encryption_key
    remoteRef:
      key: application/security
      property: encryption_key
  - secretKey: session_secret
    remoteRef:
      key: application/auth
      property: session_secret
  - secretKey: webhook_secret
    remoteRef:
      key: application/webhooks
      property: secret
  - secretKey: api_key_salt
    remoteRef:
      key: application/security
      property: api_key_salt
  - secretKey: cookie_secret
    remoteRef:
      key: application/auth
      property: cookie_secret
  - secretKey: oauth_client_id
    remoteRef:
      key: application/oauth
      property: client_id
  - secretKey: oauth_client_secret
    remoteRef:
      key: application/oauth
      property: client_secret

---
# MLflow Secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mlflow-secrets
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/component: secrets
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: mlflow-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        MLFLOW_BACKEND_STORE_URI: "postgresql://{{ .mlflow_db_user }}:{{ .mlflow_db_password }}@postgres-service:5432/mlflow"
        MLFLOW_TRACKING_USERNAME: "{{ .mlflow_username }}"
        MLFLOW_TRACKING_PASSWORD: "{{ .mlflow_password }}"
  data:
  - secretKey: mlflow_db_user
    remoteRef:
      key: database/mlflow
      property: username
  - secretKey: mlflow_db_password
    remoteRef:
      key: database/mlflow
      property: password
  - secretKey: mlflow_username
    remoteRef:
      key: aiml/mlflow
      property: username
  - secretKey: mlflow_password
    remoteRef:
      key: aiml/mlflow
      property: password

---
# TLS Certificate Secret for MLflow
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mlflow-tls-cert
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/component: tls
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: mlflow-tls-cert
    creationPolicy: Owner
    template:
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ .certificate }}"
        tls.key: "{{ .private_key }}"
  data:
  - secretKey: certificate
    remoteRef:
      key: certificates/mlflow
      property: certificate
  - secretKey: private_key
    remoteRef:
      key: certificates/mlflow
      property: private_key

---
# Basic Auth Secret for MLflow
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mlflow-basic-auth
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/component: auth
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: mlflow-basic-auth
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        auth: "{{ .htpasswd }}"
  data:
  - secretKey: htpasswd
    remoteRef:
      key: auth/mlflow
      property: htpasswd

---
# SecretStore for service-specific secrets in each namespace
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-fineprintai
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: vault-secret-store
    app.kubernetes.io/component: namespace-store
spec:
  provider:
    vault:
      server: "https://vault.fineprintai.internal:8200"
      path: "fineprintai"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "fineprintai-secrets"
          serviceAccountRef:
            name: "fineprintai-vault-auth"

---
# Service Account for Fine Print AI Vault Authentication
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fineprintai-vault-auth
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: vault-auth

---
# Service Accounts for various components
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fineprintai-qdrant
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/component: service-account

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fineprintai-neo4j
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: neo4j
    app.kubernetes.io/component: service-account

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fineprintai-mlflow
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/component: service-account

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fineprintai-lora
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: lora-training

---
# ConfigMap for Fine Print AI configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: fineprintai-config
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: configuration
data:
  # Environment
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  
  # AWS Configuration
  AWS_REGION: "us-west-2"
  S3_BUCKET: "fineprintai-storage"
  
  # Service Discovery
  POSTGRES_HOST: "postgres-service"
  POSTGRES_PORT: "5432"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  
  # AI/ML Services
  QDRANT_HOST: "qdrant-service"
  QDRANT_PORT: "6333"
  NEO4J_HOST: "neo4j-service"
  NEO4J_PORT: "7687"
  MLFLOW_HOST: "mlflow-service"
  MLFLOW_PORT: "5000"
  
  # Application Configuration
  MAX_FILE_SIZE: "50MB"
  RATE_LIMIT_WINDOW: "15"
  RATE_LIMIT_MAX: "100"
  SESSION_TIMEOUT: "3600"
  
  # Legal Analysis Configuration
  MAX_DOCUMENT_SIZE: "10MB"
  ANALYSIS_TIMEOUT: "300"
  SUPPORTED_FORMATS: "pdf,html,txt,docx"