# Comprehensive monitoring stack for Fine Print AI

# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: fineprintai-monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: server
    app.kubernetes.io/part-of: monitoring-stack
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/component: server
        app.kubernetes.io/part-of: monitoring-stack
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: prometheus
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
        - name: prometheus
          image: prom/prometheus:v2.48.0
          ports:
            - name: web
              containerPort: 9090
              protocol: TCP
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus/'
            - '--storage.tsdb.retention.time=30d'
            - '--storage.tsdb.retention.size=50GB'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--web.enable-lifecycle'
            - '--web.enable-admin-api'
            - '--query.max-concurrency=20'
            - '--query.timeout=2m'
          resources:
            requests:
              cpu: 500m
              memory: 2Gi
            limits:
              cpu: 2
              memory: 8Gi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            capabilities:
              drop:
                - ALL
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: web
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /-/ready
              port: web
            initialDelaySeconds: 5
            periodSeconds: 5
          volumeMounts:
            - name: config-volume
              mountPath: /etc/prometheus/prometheus.yml
              subPath: prometheus.yml
            - name: rules-volume
              mountPath: /etc/prometheus/rules/
            - name: prometheus-data
              mountPath: /prometheus/
            - name: tmp-volume
              mountPath: /tmp
      volumes:
        - name: config-volume
          configMap:
            name: fineprintai-monitoring-config
        - name: rules-volume
          configMap:
            name: prometheus-rules
        - name: prometheus-data
          persistentVolumeClaim:
            claimName: prometheus-data-pvc
        - name: tmp-volume
          emptyDir: {}

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: fineprintai-monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: server
    app.kubernetes.io/part-of: monitoring-stack
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/component: server
        app.kubernetes.io/part-of: monitoring-stack
    spec:
      serviceAccountName: grafana
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      containers:
        - name: grafana
          image: grafana/grafana:10.2.0
          ports:
            - name: grafana
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: admin
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secret
                  key: admin-password
            - name: GF_INSTALL_PLUGINS
              value: "grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel"
          resources:
            requests:
              cpu: 250m
              memory: 512Mi
            limits:
              cpu: 1
              memory: 2Gi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 472
            capabilities:
              drop:
                - ALL
          livenessProbe:
            httpGet:
              path: /api/health
              port: grafana
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health
              port: grafana
            initialDelaySeconds: 5
            periodSeconds: 5
          volumeMounts:
            - name: grafana-data
              mountPath: /var/lib/grafana
            - name: grafana-config
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
      volumes:
        - name: grafana-data
          persistentVolumeClaim:
            claimName: grafana-data-pvc
        - name: grafana-config
          configMap:
            name: fineprintai-monitoring-config

---
# AlertManager Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: fineprintai-monitoring
  labels:
    app.kubernetes.io/name: alertmanager
    app.kubernetes.io/component: server
    app.kubernetes.io/part-of: monitoring-stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: alertmanager
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: alertmanager
        app.kubernetes.io/component: server
        app.kubernetes.io/part-of: monitoring-stack
    spec:
      serviceAccountName: alertmanager
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
        - name: alertmanager
          image: prom/alertmanager:v0.26.0
          ports:
            - name: alertmanager
              containerPort: 9093
              protocol: TCP
          args:
            - '--config.file=/etc/alertmanager/alertmanager.yml'
            - '--storage.path=/alertmanager'
            - '--web.external-url=https://monitoring.fineprintai.com/alertmanager'
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            capabilities:
              drop:
                - ALL
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: alertmanager
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /-/ready
              port: alertmanager
            initialDelaySeconds: 5
            periodSeconds: 5
          volumeMounts:
            - name: config-volume
              mountPath: /etc/alertmanager/alertmanager.yml
              subPath: alertmanager.yml
            - name: alertmanager-data
              mountPath: /alertmanager
            - name: tmp-volume
              mountPath: /tmp
      volumes:
        - name: config-volume
          configMap:
            name: fineprintai-monitoring-config
        - name: alertmanager-data
          emptyDir: {}
        - name: tmp-volume
          emptyDir: {}

---
# Loki for Log Aggregation
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: fineprintai-monitoring
  labels:
    app.kubernetes.io/name: loki
    app.kubernetes.io/component: server
    app.kubernetes.io/part-of: monitoring-stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: loki
        app.kubernetes.io/component: server
        app.kubernetes.io/part-of: monitoring-stack
    spec:
      serviceAccountName: loki
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 10001
      containers:
        - name: loki
          image: grafana/loki:2.9.0
          ports:
            - name: http
              containerPort: 3100
              protocol: TCP
          args:\n            - '-config.file=/etc/loki/local-config.yaml'\n          resources:\n            requests:\n              cpu: 250m\n              memory: 512Mi\n            limits:\n              cpu: 1\n              memory: 2Gi\n          securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsNonRoot: true\n            runAsUser: 10001\n            capabilities:\n              drop:\n                - ALL\n          livenessProbe:\n            httpGet:\n              path: /ready\n              port: http\n            initialDelaySeconds: 45\n            periodSeconds: 10\n          readinessProbe:\n            httpGet:\n              path: /ready\n              port: http\n            initialDelaySeconds: 5\n            periodSeconds: 5\n          volumeMounts:\n            - name: loki-data\n              mountPath: /loki\n            - name: tmp-volume\n              mountPath: /tmp\n      volumes:\n        - name: loki-data\n          persistentVolumeClaim:\n            claimName: loki-data-pvc\n        - name: tmp-volume\n          emptyDir: {}\n\n---\n# Promtail DaemonSet for Log Collection\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: promtail\n  namespace: fineprintai-monitoring\n  labels:\n    app.kubernetes.io/name: promtail\n    app.kubernetes.io/component: log-collector\n    app.kubernetes.io/part-of: monitoring-stack\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: promtail\n      app.kubernetes.io/component: log-collector\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: promtail\n        app.kubernetes.io/component: log-collector\n        app.kubernetes.io/part-of: monitoring-stack\n    spec:\n      serviceAccountName: promtail\n      hostNetwork: false\n      hostPID: false\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 0  # Needs root to read host logs\n      containers:\n        - name: promtail\n          image: grafana/promtail:2.9.0\n          args:\n            - '-config.file=/etc/promtail/config.yml'\n          env:\n            - name: 'HOSTNAME'\n              valueFrom:\n                fieldRef:\n                  fieldPath: 'spec.nodeName'\n          resources:\n            requests:\n              cpu: 100m\n              memory: 128Mi\n            limits:\n              cpu: 500m\n              memory: 512Mi\n          securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsUser: 0\n            capabilities:\n              drop:\n                - ALL\n          ports:\n            - name: http-metrics\n              containerPort: 3101\n              protocol: TCP\n          livenessProbe:\n            httpGet:\n              path: /ready\n              port: http-metrics\n            initialDelaySeconds: 10\n            periodSeconds: 10\n          readinessProbe:\n            httpGet:\n              path: /ready\n              port: http-metrics\n            initialDelaySeconds: 10\n            periodSeconds: 10\n          volumeMounts:\n            - name: logs\n              mountPath: /var/log\n              readOnly: true\n            - name: promtail-config\n              mountPath: /etc/promtail\n            - name: varlibdockercontainers\n              mountPath: /var/lib/docker/containers\n              readOnly: true\n            - name: tmp-volume\n              mountPath: /tmp\n      volumes:\n        - name: logs\n          hostPath:\n            path: /var/log\n        - name: varlibdockercontainers\n          hostPath:\n            path: /var/lib/docker/containers\n        - name: promtail-config\n          configMap:\n            name: promtail-config\n        - name: tmp-volume\n          emptyDir: {}\n      tolerations:\n        - effect: NoSchedule\n          key: node-role.kubernetes.io/master\n          operator: Exists\n\n---\n# Jaeger for Distributed Tracing\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: jaeger\n  namespace: fineprintai-monitoring\n  labels:\n    app.kubernetes.io/name: jaeger\n    app.kubernetes.io/component: all-in-one\n    app.kubernetes.io/part-of: monitoring-stack\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: jaeger\n      app.kubernetes.io/component: all-in-one\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: jaeger\n        app.kubernetes.io/component: all-in-one\n        app.kubernetes.io/part-of: monitoring-stack\n    spec:\n      serviceAccountName: jaeger\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 10001\n        fsGroup: 10001\n      containers:\n        - name: jaeger\n          image: jaegertracing/all-in-one:1.50\n          ports:\n            - name: jaeger-ui\n              containerPort: 16686\n              protocol: TCP\n            - name: jaeger-grpc\n              containerPort: 14250\n              protocol: TCP\n            - name: jaeger-thrift\n              containerPort: 14268\n              protocol: TCP\n            - name: jaeger-zipkin\n              containerPort: 9411\n              protocol: TCP\n          env:\n            - name: COLLECTOR_ZIPKIN_HOST_PORT\n              value: \":9411\"\n            - name: QUERY_BASE_PATH\n              value: \"/jaeger\"\n          resources:\n            requests:\n              cpu: 250m\n              memory: 512Mi\n            limits:\n              cpu: 1\n              memory: 2Gi\n          securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsNonRoot: true\n            runAsUser: 10001\n            capabilities:\n              drop:\n                - ALL\n          livenessProbe:\n            httpGet:\n              path: /\n              port: jaeger-ui\n            initialDelaySeconds: 30\n            periodSeconds: 10\n          readinessProbe:\n            httpGet:\n              path: /\n              port: jaeger-ui\n            initialDelaySeconds: 5\n            periodSeconds: 5\n          volumeMounts:\n            - name: tmp-volume\n              mountPath: /tmp\n      volumes:\n        - name: tmp-volume\n          emptyDir: {}\n\n---\n# Services for monitoring stack\napiVersion: v1\nkind: Service\nmetadata:\n  name: prometheus-service\n  namespace: fineprintai-monitoring\n  labels:\n    app.kubernetes.io/name: prometheus\n    app.kubernetes.io/component: server\nspec:\n  type: ClusterIP\n  ports:\n    - name: web\n      port: 9090\n      targetPort: web\n      protocol: TCP\n  selector:\n    app.kubernetes.io/name: prometheus\n    app.kubernetes.io/component: server\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: grafana-service\n  namespace: fineprintai-monitoring\n  labels:\n    app.kubernetes.io/name: grafana\n    app.kubernetes.io/component: server\nspec:\n  type: ClusterIP\n  ports:\n    - name: grafana\n      port: 3000\n      targetPort: grafana\n      protocol: TCP\n  selector:\n    app.kubernetes.io/name: grafana\n    app.kubernetes.io/component: server\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: alertmanager-service\n  namespace: fineprintai-monitoring\n  labels:\n    app.kubernetes.io/name: alertmanager\n    app.kubernetes.io/component: server\nspec:\n  type: ClusterIP\n  ports:\n    - name: alertmanager\n      port: 9093\n      targetPort: alertmanager\n      protocol: TCP\n  selector:\n    app.kubernetes.io/name: alertmanager\n    app.kubernetes.io/component: server\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: loki-service\n  namespace: fineprintai-monitoring\n  labels:\n    app.kubernetes.io/name: loki\n    app.kubernetes.io/component: server\nspec:\n  type: ClusterIP\n  ports:\n    - name: http\n      port: 3100\n      targetPort: http\n      protocol: TCP\n  selector:\n    app.kubernetes.io/name: loki\n    app.kubernetes.io/component: server\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: jaeger-service\n  namespace: fineprintai-monitoring\n  labels:\n    app.kubernetes.io/name: jaeger\n    app.kubernetes.io/component: all-in-one\nspec:\n  type: ClusterIP\n  ports:\n    - name: jaeger-ui\n      port: 16686\n      targetPort: jaeger-ui\n      protocol: TCP\n    - name: jaeger-grpc\n      port: 14250\n      targetPort: jaeger-grpc\n      protocol: TCP\n    - name: jaeger-thrift\n      port: 14268\n      targetPort: jaeger-thrift\n      protocol: TCP\n    - name: jaeger-zipkin\n      port: 9411\n      targetPort: jaeger-zipkin\n      protocol: TCP\n  selector:\n    app.kubernetes.io/name: jaeger\n    app.kubernetes.io/component: all-in-one