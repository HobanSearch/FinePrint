# IMPORTANT: These are template secrets - DO NOT commit actual secrets to git!
# Use External Secrets Operator, Sealed Secrets, or manual secret creation for production

# Production Secrets
apiVersion: v1
kind: Secret
metadata:
  name: fineprintai-secrets
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: secrets
    environment: production
type: Opaque
stringData:
  # Database credentials
  POSTGRES_PASSWORD: "REPLACE_WITH_SECURE_PASSWORD"
  DATABASE_URL: "postgresql://postgres:REPLACE_WITH_SECURE_PASSWORD@postgres-primary-service.fineprintai-prod.svc.cluster.local:5432/fineprintai_prod?sslmode=require"
  
  # Redis credentials
  REDIS_PASSWORD: "REPLACE_WITH_SECURE_PASSWORD"
  REDIS_URL: "redis://:REPLACE_WITH_SECURE_PASSWORD@redis-service.fineprintai-prod.svc.cluster.local:6379"
  
  # JWT and encryption secrets
  JWT_SECRET: "REPLACE_WITH_256_BIT_RANDOM_KEY"
  JWT_REFRESH_SECRET: "REPLACE_WITH_256_BIT_RANDOM_KEY"
  ENCRYPTION_KEY: "REPLACE_WITH_32_BYTE_ENCRYPTION_KEY"
  
  # External API keys
  OPENAI_API_KEY: "sk-REPLACE_WITH_ACTUAL_OPENAI_KEY"
  ANTHROPIC_API_KEY: "sk-ant-REPLACE_WITH_ACTUAL_ANTHROPIC_KEY"
  
  # Monitoring and analytics
  SENTRY_DSN: "https://REPLACE_WITH_ACTUAL_SENTRY_DSN@sentry.io/REPLACE_PROJECT_ID"
  MIXPANEL_TOKEN: "REPLACE_WITH_MIXPANEL_TOKEN"
  
  # Email service (SendGrid)
  SENDGRID_API_KEY: "SG.REPLACE_WITH_SENDGRID_API_KEY"
  FROM_EMAIL: "noreply@fineprintai.com"
  
  # OAuth providers
  GOOGLE_CLIENT_SECRET: "REPLACE_WITH_GOOGLE_CLIENT_SECRET"
  GITHUB_CLIENT_SECRET: "REPLACE_WITH_GITHUB_CLIENT_SECRET"
  
  # Payment processing (Stripe)
  STRIPE_SECRET_KEY: "sk_live_REPLACE_WITH_LIVE_STRIPE_KEY"
  STRIPE_WEBHOOK_SECRET: "whsec_REPLACE_WITH_WEBHOOK_SECRET"
  
  # Cloud storage (if using S3)
  AWS_ACCESS_KEY_ID: "REPLACE_WITH_AWS_ACCESS_KEY"
  AWS_SECRET_ACCESS_KEY: "REPLACE_WITH_AWS_SECRET_KEY"
  S3_BUCKET_NAME: "fineprintai-prod-storage"

---
# Staging Secrets
apiVersion: v1
kind: Secret
metadata:
  name: fineprintai-secrets
  namespace: fineprintai-staging
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: secrets
    environment: staging
type: Opaque
stringData:
  # Database credentials
  POSTGRES_PASSWORD: "staging-secure-password-123"
  DATABASE_URL: "postgresql://postgres:staging-secure-password-123@postgres-primary-service.fineprintai-staging.svc.cluster.local:5432/fineprintai_staging?sslmode=require"
  
  # Redis credentials
  REDIS_PASSWORD: "staging-redis-password-123"
  REDIS_URL: "redis://:staging-redis-password-123@redis-service.fineprintai-staging.svc.cluster.local:6379"
  
  # JWT and encryption secrets
  JWT_SECRET: "staging-jwt-secret-key-2024"
  JWT_REFRESH_SECRET: "staging-refresh-secret-key-2024"
  ENCRYPTION_KEY: "staging-encryption-key-32-bytes-long"
  
  # External API keys (test keys)
  OPENAI_API_KEY: "sk-test-openai-key-for-staging"
  SENTRY_DSN: "https://staging-sentry-dsn@sentry.io/staging-project"
  SENDGRID_API_KEY: "SG.staging-sendgrid-api-key"
  STRIPE_SECRET_KEY: "sk_test_staging_stripe_key"
  STRIPE_WEBHOOK_SECRET: "whsec_staging_webhook_secret"
  
  # OAuth providers (staging apps)
  GOOGLE_CLIENT_SECRET: "staging-google-client-secret"
  GITHUB_CLIENT_SECRET: "staging-github-client-secret"

---
# Development Secrets
apiVersion: v1
kind: Secret
metadata:
  name: fineprintai-secrets
  namespace: fineprintai-dev
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: secrets
    environment: development
type: Opaque
stringData:
  # Database credentials
  POSTGRES_PASSWORD: "dev-password-123"
  DATABASE_URL: "postgresql://postgres:dev-password-123@postgres-primary-service.fineprintai-dev.svc.cluster.local:5432/fineprintai_dev"
  
  # Redis credentials
  REDIS_PASSWORD: "dev-redis-pass"
  REDIS_URL: "redis://:dev-redis-pass@redis-service.fineprintai-dev.svc.cluster.local:6379"
  
  # JWT and encryption secrets
  JWT_SECRET: "dev-jwt-secret-not-for-production"
  JWT_REFRESH_SECRET: "dev-refresh-secret-not-for-production"
  ENCRYPTION_KEY: "dev-encryption-key-32-bytes-long"
  
  # External API keys (development/test keys)
  OPENAI_API_KEY: "sk-dev-test-key"
  SENTRY_DSN: "https://dev-sentry@sentry.io/dev-project"
  SENDGRID_API_KEY: "SG.dev-test-key"
  STRIPE_SECRET_KEY: "sk_test_dev_key"
  STRIPE_WEBHOOK_SECRET: "whsec_dev_webhook"
  
  # OAuth providers (dev apps)
  GOOGLE_CLIENT_SECRET: "dev-google-secret"
  GITHUB_CLIENT_SECRET: "dev-github-secret"

---
# TLS Secrets for multiple environments
apiVersion: v1
kind: Secret
metadata:
  name: fineprintai-tls
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: tls
    environment: production
type: kubernetes.io/tls
data:
  # Production TLS certificate - replace with actual cert
  # Generate with: kubectl create secret tls fineprintai-tls --cert=prod.crt --key=prod.key --dry-run=client -o yaml
  tls.crt: ""  # Base64 encoded production certificate
  tls.key: ""  # Base64 encoded production private key

---
apiVersion: v1
kind: Secret
metadata:
  name: fineprintai-tls
  namespace: fineprintai-staging
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: tls
    environment: staging
type: kubernetes.io/tls
data:
  # Staging TLS certificate
  tls.crt: ""  # Base64 encoded staging certificate
  tls.key: ""  # Base64 encoded staging private key

---
# Docker registry secrets for private images
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: registry
    environment: production
type: kubernetes.io/dockerconfigjson
stringData:
  .dockerconfigjson: |
    {
      "auths": {
        "your-registry.com": {
          "username": "REPLACE_WITH_REGISTRY_USERNAME",
          "password": "REPLACE_WITH_REGISTRY_PASSWORD",
          "auth": "REPLACE_WITH_BASE64_USERNAME_PASSWORD"
        }
      }
    }

---
# Monitoring secrets
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secret
  namespace: fineprintai-monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
type: Opaque
stringData:
  admin-password: "REPLACE_WITH_SECURE_GRAFANA_PASSWORD"
  secret-key: "REPLACE_WITH_GRAFANA_SECRET_KEY"

---
apiVersion: v1
kind: Secret
metadata:
  name: alertmanager-secret
  namespace: fineprintai-monitoring
  labels:
    app.kubernetes.io/name: alertmanager
    app.kubernetes.io/component: monitoring
type: Opaque
stringData:
  slack-webhook-url: "https://hooks.slack.com/services/REPLACE/WITH/ACTUAL"
  pagerduty-routing-key: "REPLACE_WITH_PAGERDUTY_KEY"
  webhook-url: "https://your-webhook-endpoint.com/alerts"

---
# External Secrets Operator Configuration
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: secrets
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        secretRef:
          accessKeyID:
            name: aws-credentials
            key: access-key-id
          secretAccessKey:
            name: aws-credentials
            key: secret-access-key

---
# External Secret for database credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: postgres-external-secret
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: secrets
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: postgres-secret-external
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        POSTGRES_PASSWORD: "{{ .password }}"
        DATABASE_URL: "postgresql://postgres:{{ .password }}@postgres-primary-service.fineprintai-prod.svc.cluster.local:5432/fineprintai_prod?sslmode=require"
  data:
    - secretKey: password
      remoteRef:
        key: fineprintai/postgres
        property: password

---
# AWS Credentials for External Secrets
apiVersion: v1
kind: Secret
metadata:
  name: aws-credentials
  namespace: fineprintai-prod
  labels:
    app.kubernetes.io/name: fineprintai
    app.kubernetes.io/component: secrets
type: Opaque
stringData:
  access-key-id: "REPLACE_WITH_AWS_ACCESS_KEY_ID"
  secret-access-key: "REPLACE_WITH_AWS_SECRET_ACCESS_KEY"